{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/react-styling-solutions-jss/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"CSS-in-JS for your React app","subtitle":"JSS based styling solutions for your React.js app","date":"2019-11-22","publishedBy":"Henrik Grönvall"},"excerpt":"CSS-in-JS has been one of the biggest developments of the past few years in the CSS world. Just like preprocessors \nbypassed CSS to introduce their own set of…","timeToRead":3,"html":"<p>CSS-in-JS has been one of the biggest developments of the past few years in the CSS world. Just like preprocessors\nbypassed CSS to introduce their own set of new features over a decade ago, CSS-in-JS libraries piggyback on JavaScript's\npower to make their own path without waiting for CSS to catch up.</p>\n<h1>Introduction</h1>\n<p>For a long time, writing CSS was straightforward: add .css extension to your file, open up a text editor, and start typing.\nOver the years, CSS has developed its own ecosystem of technologies, from preprocessors like Sass and Less to\nmethodologies like BEM, to more recent developments like CSS-in-JS.</p>\n<p>CSS-in-JS represent a collection of ideas to solve complex problems with CSS. It's NOT a particular library, there does\nexist different libraries to choose and, they all may solve a different subset of problems and use different\napproaches, depending on their implementation details.</p>\n<p>However, all implementations have in common that they tackle the problems using APIs instead of convention and, they\nleverage JavaScript as a language for styles authoring.</p>\n<h1>Why CSS-in-JS?</h1>\n<p>CSS-in-JS is has not been in the game for so long and when I'm using it I have noted som drivers that I think is behind\nand why developers actually likes it.</p>\n<h2>Relies on JavaScript’s modules implementation.</h2>\n<p>CSS has no concept of modules. In the component era and more and more complex applications: CSS-in-JS uses JavaScript's\nmodules to hide the implementation details and exposing only public APIs.</p>\n<h2>Automates the scoping by generating unique selectors</h2>\n<p>We know CSS always had a single global namespace, for example, a class can be added to any element, a tag selector can\ntarget any element in the document. The entire page was styled as one big chunk. Since then the complexity of many sites\nhas dramatically increased and this is the main reason why many CSS methodologies were created. The CSS methodologies are\nmostly based on convention and, it is not easy to establish and consistently enforce when many people contribute to a project over\ntime and, it used to lead to unpredictable styles leaking.</p>\n<p>CSS-in-JS as well as CSS Modules generate unique selectors and, our styles will be localized at the element in the DOM</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>”_255BVABjBx_0DfMd8sZNVs”</span><span class=\"token punctuation\">></span></span>Localized<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Encourages the coupling of CSS and HTML</h2>\n<p>The idea to separate the concerns based on a language ignores the fact that CSS was not designed to be truly separated\nfrom HTML. CSS has implicit assumptions about the HTML structure. For example, flexbox layout makes an assumption that\ncontainers to position are direct children of the element it was applied to.</p>\n<p>When a CSS rule is applied to different HTML elements across our application, we can basically describe it as a\n“one-to-many relationship”. If you change the CSS rule, you potentially need to modify all related HTML elements.</p>\n<p>CSS-in-JS encourages this relationship to be \"one-to-one\", while still keeping the ability to have shared properties. </p>\n<h2>Gives developers API to describe state-based styles in a better way</h2>\n<p>One of the very powerful patterns CSS-in-JS enables is state-based styling. It is usually implemented as a JavaScript\nfunction which receives a state object and returns CSS properties. As a result, a CSS rule is generated that\ncorresponds to the state of an element. Compared to a more traditional way, where we build a class attribute containing\nmultiple class names, this has some advantages:</p>\n<ol>\n<li>Logic responsible for the final CSS rule has access to the state and can be located together with the rest of styles.</li>\n<li>Logic generating HTML becomes less cluttered by the classes concatenation logic.</li>\n</ol>\n<p>Well, that's all for now, and I wish everybody a happy weekend. :-)</p>"}},"pageContext":{"slug":"/articles/react-styling-solutions-jss/"}},"staticQueryHashes":["2940938484"]}