{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/react-how-to-use-context-part2/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"How to use context in React - part 2","subtitle":"Implementation provider, HOC, state, etc","date":"2019-11-12","publishedBy":"Henrik Grönvall","image":{"publicURL":"/static/react-logo-150-white-85ae65ec2cc28652d0dd2684f9e174e2.jpg"}},"excerpt":"One of Reacts latest cool new feature are the Hooks API's and they really shine when creating function components. One \nof the Hooks is…","timeToRead":2,"html":"<p>One of Reacts latest cool new feature are the Hooks API's and they really shine when creating function components. One\nof the Hooks is called useContext and in this article we are using it to simplify context management from\n<a href=\"/articles/react-how-to-use-context-part1\">Part 1 - using context API</a> by using the useContext instead.</p>\n<h1>Use useContext hook API</h1>\n<p>React's Context is initialized with React's createContext top level API. In this tutorial we are using the context\nto share a theme across tha application. To keep it simple, the theme in this tutorial will be a color only. A theme\ncould of course contain much more such as paddings, margins, font-sizes, etc. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ThemeContext.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token comment\">// We are not specifying any default value</span>\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemeContext</code></pre></div>\n<p><b>Next</b> in component A we are using the provider API from the context API to provide a color value in the context\nobject.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ComponentA.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeContext'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ThemeContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The A component is now implicit a theme provider ensuring all components below it has access to the themes context, eg,\nSomewhere below component A, not component D in this case, but any other child component, let's say component C, will\nuse this theme to style itself:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ComponentC.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeContext'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ThemeContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token parameter\">color</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Hello World\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>That's the most basic approach of using context API with a single top-level Provider component and one Consumer\ncomponent in a child component sitting somewhere below. There can be many more child components using the Consumer\ncomponent though, but they have to be located somewhere below the component using the Provider component.</p>\n<p>Now comes the crucial part where we shift towards React's useContext Hook. As you can see, the Consumer component coming\nfrom React's Context is by default a render prop component. In a world where we can use React Hooks, a render prop\ncomponent isn't always the best choice. Let's see the previous example with React's useContext Hook instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ComponentC.js</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeContext'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// useContextHook :-)</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      Hello World\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React's useContext just uses the Context object created before and retrieve the most recent value from it. Using the\nReact Hooks instead of the Consumer component makes the code much more readable, less verbose, and doesn't introduce a\nkinda artificial component via the Consumer component in between. :-)</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/articles/react-how-to-use-context-part2/"}}}