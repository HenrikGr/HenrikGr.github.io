{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/react-how-to-use-context-part2/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"How to use context in React - 2","subtitle":"How to use useContext Hook in React","date":"2019-11-13","publishedBy":"Henrik Grönvall"},"excerpt":"One of Reacts last new features are the Hooks API's and, they really shine when creating function components. One\r\nof the Hooks is called useContext and in this…","timeToRead":2,"html":"<p>One of Reacts last new features are the Hooks API's and, they really shine when creating function components. One\r\nof the Hooks is called useContext and in this article I'm describing a simple solution how to use it instead och the\r\ntraditional way that I wrote about in part 1 in this mini tutorial.</p>\n<h1>Use useContext hook API</h1>\n<p>React's Context is initialized with React's createContext top level API. In this tutorial we are using the context\r\nto share a theme across the application. To keep it simple, the theme in this tutorial will be only a color. A theme\r\ncould of course contain much more such as padding, margin, font-sizes, etc.</p>\n<p>Demonstration of creating a context.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ThemeContext.js</span>\r\n\r\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\r\n\r\n<span class=\"token comment\">// We are not specifying any default value</span>\r\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemeContext\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>After we have created a context, in component A, we are using the provider API from the context API to provide a color\r\nvalue in the context object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ComponentA.js</span>\r\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\r\n\r\n<span class=\"token comment\">// Import the context</span>\r\n<span class=\"token keyword\">import</span> ThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeContext'</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n  <span class=\"token comment\">// Give the context provider a color value</span>\r\n  <span class=\"token operator\">&lt;</span>ThemeContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span><span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\r\n<span class=\"token punctuation\">)</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The component A is now implicit a theme provider ensuring all components below it, has access to the theme's context, eg,\r\nSomewhere below component A, not component D in this case, but any other child component, let's say component C, will\r\nuse this theme to style itself:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ComponentC.js</span>\r\n\r\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\r\n\r\n<span class=\"token comment\">// Import the context</span>\r\n<span class=\"token keyword\">import</span> ThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeContext'</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n  <span class=\"token comment\">// Consume the context</span>\r\n  <span class=\"token operator\">&lt;</span>ThemeContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\r\n    <span class=\"token punctuation\">{</span><span class=\"token parameter\">color</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n      <span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\r\n        Hello World\r\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\r\n<span class=\"token punctuation\">)</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>That's the most basic approach of using context API with a single top-level Provider component and one Consumer\r\ncomponent in a child component sitting somewhere below. There can be many more child components using the Consumer\r\ncomponent though, but they have to be located somewhere below the component using the Provider component.</p>\n<p>Now comes the crucial part where we shift towards React's useContext Hook. As you can see, the Consumer component coming\r\nfrom React's Context is by default a render prop component. In a world where we can use React Hooks, a render prop\r\ncomponent isn't always the best choice. Let's see the previous example with React's useContext Hook instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ComponentC.js</span>\r\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\r\n\r\n<span class=\"token comment\">// Import the context</span>\r\n<span class=\"token keyword\">import</span> ThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeContext'</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// useContextHook hook to get the value</span>\r\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\r\n      Hello World\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>React's useContext just uses the Context object created before and retrieve the most recent value from it. Using the\r\nReact Hooks instead of the Consumer component makes the code much more readable, less verbose, and doesn't introduce a\r\nkinda artificial component via the Consumer component in between.</p>"}},"pageContext":{"slug":"/articles/react-how-to-use-context-part2/"}},"staticQueryHashes":["4011214723"]}