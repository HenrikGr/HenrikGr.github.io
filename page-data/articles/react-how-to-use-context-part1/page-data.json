{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/react-how-to-use-context-part1/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"How to use context in React - part 1","subtitle":"Basic principles, why, how and when to use context api","date":"2019-11-12","publishedBy":"Henrik Grönvall","image":{"publicURL":"/static/react-logo-150-white-85ae65ec2cc28652d0dd2684f9e174e2.jpg"}},"excerpt":"Managing state is arguably on of the hardest part of any application and It's why there are so many state management \nlibraries available. Search NPM and you…","timeToRead":4,"html":"<p>Managing state is arguably on of the hardest part of any application and It's why there are so many state management\nlibraries available. Search NPM and you will find a ton of them just based on Redux. </p>\n<p>React Context is one of the core state management features and when your application grows in size you should consider\ngiving it a try. Many third-party libraries like Redux are using it under the hood anyway, so why not learning about it.</p>\n<h1>Why use React context?</h1>\n<p>If your application component hierarchy grows in vertical size, it becomes tedious passing props several React components\ndown -- from a parent component to a deeply nested child component and most often all the components in between are not\ninterested in these props and just pass the props to the next child component until it reaches the desired child component.</p>\n<p>In React this is called \"prop drilling\" and I personally do not like it at all since I always strives after clean solid\ncomponents with few dependencies. Below you can see the hierarchy when prop drilling happens down the tree: </p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\">          +----------------+\n          |                |\n          |        A       |\n          |        |Props  |\n          |        v       |\n          |                |\n          +--------+-------+\n                   |\n         +---------+-----------+\n         |                     |\n         |                     |\n+--------+-------+    +--------+-------+\n|                |    |                |\n|                |    |        <span class=\"token operator\">+</span>       |\n|       B        |    |        |Props  |\n|                |    |        v       |\n|                |    |                |\n+----------------+    +--------+-------+\n                               |\n                      +--------+-------+\n                      |                |\n                      |        <span class=\"token operator\">+</span>       |\n                      |        |Props  |\n                      |        v       |\n                      |                |\n                      +--------+-------+\n                               |\n                      +--------+-------+\n                      |                |\n                      |        <span class=\"token operator\">+</span>       |\n                      |        |Props  |\n                      |        C       |\n                      |                |\n                      +----------------+</code></pre></div>\n<p>This clutters every component in between which has to pass down these props without using them but React Context gives\nyou a way out of this mess - instead of passing down the props down through each component, you can tunnel props through\nthese components implicitly with React Context. React context can be viewed as a message channel for components. If a\ncomponent needs access to the information from the context - it can consume it on demand, because a top-level component\nprovides this information in the context.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\">          +----------------+\n          |                |\n          |       A        |\n          |                |\n          |     Provide    |\n          |     Context    |\n          +--------+-------+\n                   |\n         +---------+-----------+\n         |                     |\n         |                     |\n+--------+-------+    +--------+-------+\n|                |    |                |\n|                |    |                |\n|       B        |    |        D       |\n|                |    |                |\n|                |    |                |\n+----------------+    +--------+-------+\n                               |\n                      +--------+-------+\n                      |                |\n                      |                |\n                      |        E       |\n                      |                |\n                      |                |\n                      +--------+-------+\n                               |\n                      +--------+-------+\n                      |                |\n                      |        C       |\n                      |                |\n                      |     Consume    |\n                      |     Context    |\n                      +----------------+</code></pre></div>\n<p>Use cases for React context is mostly for application wide state and for example - imagine your React application has a\ntheme for a color set and various components in your application needs to know about the theme to style themselves - that's\nwhere React's Context is very popular.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\">          +----------------+\n          |                |\n          |       A        |\n          |                |\n          |     Provide    |\n          |       Theme    |\n          +--------+-------+\n                   |\n         +---------+-----------+\n         |                     |\n         |                     |\n+--------+-------+    +--------+-------+\n|                |    |                |\n|                |    |                |\n|       B        |    |        D       |\n|                |    |                |\n|                |    |                |\n+----------------+    +--------+-------+\n                               |\n                      +--------+-------+\n                      |                |\n                      |                |\n                      |        E       |\n                      |                |\n                      |                |\n                      +--------+-------+\n                               |\n                      +--------+-------+\n                      |                |\n                      |        C       |\n                      |                |\n                      |     Consume    |\n                      |       Theme    |\n                      +----------------+</code></pre></div>\n<p>In this case, component A provides the context with the theme and component C consumes it. Somewhere in between are\ncomponents D and E and they don't care about the information, only component C consumes it. If any other components wants\nto consume it, they can access the context as long as the provider is on top of them in the hierarchy. </p>\n<h1>How to use it?</h1>\n<p><b>First</b>, you need to create the React Context itself which gives you access to a Provider and Consumer component. When you\ncreate the context with React by using createContext, you can pass it an initial value. The initial value can be null\ntoo.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ThemeContext.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemeContext<span class=\"token punctuation\">;</span></code></pre></div>\n<p><b>Second</b>, component A would have to provide the context with the given Provider component. In this case, its value is\ngiven to it right away, but it can be anything from component state (e.g. fetched data) to props. If the value comes\nfrom a modifiable React State, the value passed to the Provider component can be changed too.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ComponentA.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeContext'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ThemeContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Component A displays only component D, doesn't pass any props to it though, but rather makes the value green available\nto all the React components below component A. One of the child components will be component C that consumes the context\neventually.</p>\n<p><b>Third</b>, in your component C, below component D, you could consume the context object. Notice that component A doesn’t\nneed to pass down anything via component D in the props so that it reaches component C.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/ComponentC.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ThemeContext <span class=\"token keyword\">from</span> <span class=\"token string\">'./ThemeContext'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ThemeContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Hello World\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The component can derive its style by consuming the context. The Consumer component makes the passed context available\nby using a render prop. As you can imagine, following this way every component that needs to be styled according to the\ntheme could get the necessary information from React's Context by using the ThemeContext's Consumer component now. You\nonly have to use the Provider component which passes the value once somewhere above them.</p>\n<h1>When to use it?</h1>\n<p>When should you use React Context? Generally speaking there are two use cases when to use it:</p>\n<ol>\n<li>When your React component hierarchy grows vertically in size and you want to be able to pass props to child components\nwithout bothering components in between.</li>\n<li>When you want to have advanced state management in React with React Hooks for passing state and state updater functions\nvia React Context through your React application. Doing it via React Context allows you to create a shared and global state.</li>\n</ol>\n<p>In the next part of this mini tutorial I will show how to implement React context using Reacts hook useContext and\nfunction component. It's is very simple and gives us clean code. :-)</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/articles/react-how-to-use-context-part1/"}}}