{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/js-scope-hoisting-explained/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Scope and hoisting in JavaScript","subtitle":"Variable scope and hoisting in demonstrations","date":"2019-11-14","publishedBy":"Henrik Grönvall","image":{"publicURL":"/static/javascript-150-ea7cd70feac93753d6b43c37e52d932f.png"}},"excerpt":"In this article I will go through JavaScript’s variable scope and hoisting and all the peculiarities of both of them. \nI think it is…","timeToRead":7,"html":"<p>In this article I will go through JavaScript’s variable scope and hoisting and all the peculiarities of both of them.\nI think it is important to understand how variable scope and variable hoisting work in JavaScript and if you want to\nunderstand JavaScript well, these concept are a must.</p>\n<blockquote>\n<p>Note: Since ES6 JavaScript has support for block level scope and the example codes will contain code before and after\nthe introduction of block level scope.</p>\n</blockquote>\n<h1>Variable Scope</h1>\n<p>A variable’s scope is the context in which the variable exists. That's it, over to the next article. just kidding, the\nscope specifies from where you can access a variable and whether you have access to the variable in that context and.</p>\n<p>Variables have either a <b>local</b> scope or a <b>global</b> scope. Any variable declared outside of a function belongs\nto the global scope, and is therefore accessible from anywhere in your code. Each function has its own scope, and any\nvariable declared within that function is only accessible from that function and any nested functions.</p>\n<h2>1. Local Variables also called Function level scope</h2>\n<p>JavaScript did not have support for block level scope before but today it has and local variables can hav either\nfunction level scope or block level scope. Variables declared with the let or const keyword will have\nblock level scope and variables declared with the keyword var will have function scope. If a variable is declared\nwith the let or const keyword direct under the function block it will have function scope.</p>\n<p>Demonstration of Function-level Scope</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Declare a variable in the global scope</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Declare a local variable with function scope</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lars\"</span>  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Lars</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Henrik</span></code></pre></div>\n<h2>Block-Level Scope</h2>\n<p>A short example of block level scope</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Declare a variable in the global scope</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\n\n  <span class=\"token comment\">// the curly braces block creates a local context </span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// declare a variable with block level scope</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lars\"</span>   \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Lars: in the block scope</span>\n  <span class=\"token punctuation\">}</span>\n\n \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Henrik: global scope</span></code></pre></div>\n<h3>If You Don’t Declare Your Local Variables, you will get into trouble</h3>\n<p>Always declare your local variables before you use them. In fact, you should use a linter to check your code for\nsyntax errors and style guides. Here is the trouble with not declaring local variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// declare a variable in the global context</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Michael Jackson\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showCelebrityName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showOrdinaryPersonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// If you do not declare your variables</span>\n  <span class=\"token comment\">// They will be a part of the global scope.    </span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik Grönvall\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showCelebrityName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Michael Jackson: in global scope</span>\n<span class=\"token function\">showOrdinaryPersonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Henrik Grönvall</span>\n<span class=\"token function\">showCelebrityName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Henrik Grönvall: The global variable has changed</span>\n\n\n<span class=\"token comment\">// The solution is to declare your local variable</span>\n<span class=\"token comment\">// with the var, let or const keyword</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">showOrdinaryPersonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// declare a local variable with function scope</span>\n  <span class=\"token comment\">// it will not overwrite the global one    </span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik Grönvall\"</span>  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Local Variables Have Priority Over Global Variables in Functions</h3>\n<p>If you declare a global variable and a local variable with the same name, the local variable will have priority when\nyou attempt to use the variable inside a function (local scope):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// declare a variable in the global context</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Paul\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">users</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// declare a local variable with function scope</span>\n  <span class=\"token comment\">// Here, the name variable is local and it takes precedence </span>\n  <span class=\"token comment\">// over the same name variable in the global scope</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ringo\"</span>\n\n  <span class=\"token comment\">// The search for name starts right here inside the function </span>\n  <span class=\"token comment\">// before it attempts to look outside the function in the </span>\n  <span class=\"token comment\">// global scope</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Ringo</span></code></pre></div>\n<h2>2. Global Variables</h2>\n<p>All variables declared outside a function are in the global scope. In the browser, which is what we are concerned with\nas front-end developers, the global context or scope is the window object, or the entire HTML document.</p>\n<p>Any variable declared or initialized outside a function is a global variable, and it is therefore available to the\nentire application. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// declare a variable in the global context</span>\n<span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\n\n<span class=\"token comment\">// or even this</span>\nfirstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\n\n<span class=\"token comment\">// or </span>\n<span class=\"token keyword\">var</span> name  <span class=\"token comment\">// name;</span></code></pre></div>\n<p>All global variables are attached to the window object. So, all the global variables we just declared can be accessed\non the window object like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Age is a global variable because it was not declared with </span>\n  <span class=\"token comment\">// the var, let or const keyword inside this function</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">90</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 90</span>\n\n<span class=\"token comment\">// Age is in the global context, so it is available here, too</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 90</span></code></pre></div>\n<p>Demonstration of variables that are in the Global scope even as they seem otherwise:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Both firstName variables are in the global scope, </span>\n<span class=\"token comment\">// even though the second one is surrounded by a block {}. </span>\n<span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Lars\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The second declaration of firstName simply </span>\n<span class=\"token comment\">// re-declares and overwrites the first one</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Lars</span>\n\n<span class=\"token comment\">// Note: JavaScript has block level </span>\n<span class=\"token comment\">// scope so this is easy to fix.</span>\n<span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// using the let or const keyword declares</span>\n  <span class=\"token comment\">// the variable in block level scope</span>\n  <span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Lars\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The second declaration does </span>\n<span class=\"token comment\">// not overwrites the first one</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Henrik</span>\n\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Another example</span>\n<span class=\"token comment\">// </span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The variable i is a global variable and it is </span>\n<span class=\"token comment\">// accessible in the following function with the </span>\n<span class=\"token comment\">// last value it was assigned above </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">aNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The variable i in the aNumber function below is </span>\n<span class=\"token comment\">// the global variable i that was changed in the for </span>\n<span class=\"token comment\">// loop above. Its last value was 11, set just before </span>\n<span class=\"token comment\">// the for loop exited:</span>\n<span class=\"token function\">aNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 11</span></code></pre></div>\n<h3>setTimeout Variables are Executed in the Global Scope</h3>\n<p>Note that all functions in setTimeout are executed in the global scope. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// The use of the \"this\" object inside the setTimeout </span>\n<span class=\"token comment\">// function refers to the Window object, not to myObj</span>\n<span class=\"token keyword\">var</span> highValue <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token keyword\">var</span> constantVal <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  highValue<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  constantVal<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">calculateIt</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constantVal <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>highValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The \"this\" object in the setTimeout function used the </span>\n<span class=\"token comment\">// global highValue and constantVal variables, because the </span>\n<span class=\"token comment\">// reference to \"this\" in the setTimeout function refers </span>\n<span class=\"token comment\">// to the global window object, not to the myObj object as </span>\n<span class=\"token comment\">// we might expect.</span>\n\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">calculateIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 400</span>\n<span class=\"token comment\">// This is an important point to remember.</span></code></pre></div>\n<h3>Do not Pollute the Global Scope</h3>\n<p>Yes, it is true, do not pollute the global scope. Boy have I seen code in my life that are an absolute mess after\nsome developers have not understood this.</p>\n<p>Consider this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// These two variables are in the global scope </span>\n<span class=\"token comment\">// and they shouldn't be here</span>\n<span class=\"token keyword\">var</span> firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Full Name: \"</span> <span class=\"token operator\">+</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is the improved code and the proper way to avoid polluting the global scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Declare the variables inside the function </span>\n<span class=\"token comment\">// where they are local variables</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> firstName<span class=\"token punctuation\">,</span> lastName\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Full Name: \"</span> <span class=\"token operator\">+</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// or use the nice new feature of default parameters.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">,</span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Grönvall\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Full Name: \"</span> <span class=\"token operator\">+</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note, the function in the last example is also in the global scope.</p>\n<h1>Variable Hoisting</h1>\n<p>In most of the examples so far, we’ve used <b>var</b> keyword to declare a variable, and we have initialized it with a\nvalue. After declaring and initializing, we can access or reassign the variable.</p>\n<p>If we tries to use a variable before it has been declared and initialized, it will return undefined</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Attempt to use a variable before declaring it</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// Variable assignment</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token number\">100</span></code></pre></div>\n<p>If we omit the <b>var</b> keyword, we are no longer declaring the variable, only initializing it. It will return a\nReferenceError and halt the execution of the script.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Attempt to use a variable before declaring it</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: name is not defined</span>\n\n<span class=\"token comment\">// Variable assignment without var</span>\nname <span class=\"token operator\">=</span> <span class=\"token number\">100</span></code></pre></div>\n<p>The reason for this is due to hoisting, a behavior of JavaScript in which variable and function declarations are moved\nto the top of their scope. Since only the actual declaration is hoisted, not the initialization, the value in the first\nexample returns undefined.</p>\n<p>Another example to iterate and make it clearer:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"First Name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Last Name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// First Name: undefined</span>\n<span class=\"token comment\">// Last Name: Ford</span>\n\n<span class=\"token comment\">// The reason undefined prints first is because the </span>\n<span class=\"token comment\">// local variable name was hoisted to the top of </span>\n<span class=\"token comment\">// the function, which means it is this local variable </span>\n<span class=\"token comment\">// that get calls the first time.</span>\n<span class=\"token comment\">// This is how the code is actually processed by the </span>\n<span class=\"token comment\">// JavaScript engine:</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// name is hoisted, note that is undefined at this point, </span>\n  <span class=\"token comment\">// since the assignment happens below</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"First Name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// First Name: undefined</span>\n\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name is assigned a value</span>\n\n  <span class=\"token comment\">// now name is Ford</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Last Name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Last Name: Ford</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Function Declaration Overrides Variable Declaration When Hoisted</h2>\n<p>Both function declaration and variable declarations are hoisted to the top of the containing scope, and function\ndeclaration takes precedence over variable declarations, but not over variable assignment. As is noted above,\nvariable assignment is not hoisted, and neither is function assignment. </p>\n<p>As a reminder, this is a function assignment: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here is a basic example to demonstrate:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token comment\">// Both the variable and the function are named myName</span>\n<span class=\"token keyword\">var</span> myName<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">myName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The function declaration overrides the variable name</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function</span>\n\n<span class=\"token comment\">// But in this example, the variable assignment overrides </span>\n<span class=\"token comment\">// the function declaration</span>\n \n<span class=\"token comment\">// This is the variable assignment (initialization) </span>\n<span class=\"token comment\">// that overrides the function declaration.</span>\n<span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Henke\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string </span></code></pre></div>\n<p>It is important to note that function expressions, such as the example below, are not hoisted.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Lars\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Summary</h1>\n<blockquote>\n<p>Important: In strict mode, an error will occur if you assign a variable a value without first declaring the variable.\nAlways declare your variables and use linters. :-)</p>\n</blockquote>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/articles/js-scope-hoisting-explained/"}}}