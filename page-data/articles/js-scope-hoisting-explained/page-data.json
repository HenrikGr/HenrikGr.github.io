{
    "componentChunkName": "component---src-templates-article-page-template-js",
    "path": "/articles/js-scope-hoisting-explained/",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"Scope and hoisting in JavaScript","subtitle":"An introduction about variable scopes and hoisting","date":"2019-11-15","publishedBy":"Henrik Grönvall"},"excerpt":"In this article I will go through JavaScript’s variable scope and hoisting and some of the peculiarities of both of them.\r\nIt is important to understand how…","timeToRead":8,"html":"<p>In this article I will go through JavaScript’s variable scope and hoisting and some of the peculiarities of both of them.\r\nIt is important to understand how variable scope and variable hoisting work in JavaScript and if you want to\r\nunderstand JavaScript well, these concept are a must.</p>\n<h1>Introduction of scope and hoisting in JavaScript</h1>\n<p>Variables are a fundamental part of any programming languages, and are among the first and most important concepts\r\nbeginners learn. There are a number of different properties of variables, as well as several rules which\r\nmust be followed when naming them in JavaScript.</p>\n<p>In JavaScript, you can use three keywords when declaring a variable — <strong>var</strong>, <strong>let</strong>, and <strong>const</strong> — and\r\neach one affects how the code will interpret the variable differently.</p>\n<h2>Difference Between var, let, and const</h2>\n<p>The differences between the three are based on scope, hoisting, and reassignment.</p>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Scope</th>\n<th>Hoisting</th>\n<th>Can be reassigned</th>\n<th>Can be redeclared</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>var</td>\n<td>Function</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>let</td>\n<td>Block</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>const</td>\n<td>Block</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n<h2>Variable scope</h2>\n<p>A variable’s scope is the context in which the variable exists. The scope specifies from where you can access a variable\r\nand whether you have access to the variable in that context and a variable declared outside of a function belongs to the\r\nglobal scope, and is therefore accessible from anywhere in your code. Each function has its own scope, and variable\r\ndeclared with keyword <strong>var</strong> within that function is only accessible from that function and any nested functions, and\r\nvariables declared with keyword <strong>let</strong> or <strong>const</strong> within that function is only accessible from the block within\r\nthe function where it is declared. :-)</p>\n<p>We can summarize this and say JavaScript has variables that are either;</p>\n<ul>\n<li>local or,</li>\n<li>global.</li>\n</ul>\n<h2>Local Variables</h2>\n<p>Variables declared with the <strong>var</strong> keyword has function scope as seen in the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Declare a variable in the global scope</span>\r\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Declare a local variable with function scope</span>\r\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lars\"</span>  \r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Lars</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Henrik</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Variables declared with the <strong>let</strong>, (or <strong>const</strong>) keyword has block scope as seen in the example below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Declare a variable in the global scope</span>\r\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\r\n\r\n  <span class=\"token comment\">// the curly braces block creates a local context </span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// declare a variable with block level scope</span>\r\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lars\"</span>   \r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Lars: in the block scope</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n \r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Henrik: global scope</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>If You Don’t Declare Your Local Variables, you will get into trouble</h3>\n<p>Always declare your local variables before you use them. In fact, you should use a linter to check your code for\r\nsyntax errors and style guides. Here is the trouble with not declaring local variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// declare a variable in the global context</span>\r\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Michael Jackson\"</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">showCelebrityName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">showOrdinaryPersonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// If you do not declare your variables</span>\r\n  <span class=\"token comment\">// They will be a part of the global scope.    </span>\r\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik Grönvall\"</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">showCelebrityName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Michael Jackson: in global scope</span>\r\n<span class=\"token function\">showOrdinaryPersonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Henrik Grönvall</span>\r\n<span class=\"token function\">showCelebrityName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Henrik Grönvall: The global variable has changed</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Local Variables Have Priority Over Global Variables in Functions</h3>\n<p>If you declare a global and local variable with the same name, the local variable will have priority when\r\nyou attempt to use the variable inside a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// declare a variable in the global context</span>\r\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Paul\"</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">users</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// declare a local variable with function scope</span>\r\n  <span class=\"token comment\">// Here, the name variable is local and it takes precedence </span>\r\n  <span class=\"token comment\">// over the same name variable in the global scope</span>\r\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ringo\"</span>\r\n\r\n  <span class=\"token comment\">// The search for name starts right here inside the function </span>\r\n  <span class=\"token comment\">// before it attempts to look outside the function in the </span>\r\n  <span class=\"token comment\">// global scope</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> \r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Ringo</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Global Variables</h2>\n<p>All variables declared outside a function are in the global scope. In the browser, which is what we are concerned with\r\nas front-end developers, the global context or scope is the window object, or the entire HTML document.</p>\n<p>Any variable declared or initialized outside a function is a global variable, and it is therefore available to the\r\nentire application. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// declare a variable in the global context</span>\r\n<span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\r\n\r\n<span class=\"token comment\">// or even this</span>\r\nfirstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\r\n\r\n<span class=\"token comment\">// or </span>\r\n<span class=\"token keyword\">var</span> name  <span class=\"token comment\">// name;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>All global variables are attached to the window object. So, all the global variables we just declared can be accessed\r\non the window object like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Age is a global variable because it was not declared</span>\r\n  age <span class=\"token operator\">=</span> <span class=\"token number\">90</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// </span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">showAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 90</span>\r\n\r\n<span class=\"token comment\">// Age is in the global context, so it is available here, too</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 90</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Demonstration of variables that are in the global scope even as they seem otherwise:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Both firstName variables are in the global scope, </span>\r\n<span class=\"token comment\">// even though the second one is surrounded by a block {}. </span>\r\n<span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Lars\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// The second declaration of firstName simply </span>\r\n<span class=\"token comment\">// re-declares and overwrites the first one</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Lars</span>\r\n\r\n<span class=\"token comment\">//</span>\r\n<span class=\"token comment\">// Another example</span>\r\n<span class=\"token comment\">// </span>\r\n\r\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// The variable i is a global variable and it is </span>\r\n<span class=\"token comment\">// accessible in the following function with the </span>\r\n<span class=\"token comment\">// last value it was assigned above </span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">aNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// The variable i in the aNumber function below is </span>\r\n<span class=\"token comment\">// the global variable i that was changed in the for </span>\r\n<span class=\"token comment\">// loop above. Its last value was 11, set just before </span>\r\n<span class=\"token comment\">// the for loop exited:</span>\r\n<span class=\"token function\">aNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 11</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>setTimeout Variables are Executed in the Global Scope</h3>\n<p>Note that all functions in setTimeout are executed in the global scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// The use of the \"this\" object inside the setTimeout </span>\r\n<span class=\"token comment\">// function refers to the Window object, not to myObj</span>\r\n<span class=\"token keyword\">var</span> highValue <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\r\n<span class=\"token keyword\">var</span> constantVal <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\r\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">highValue</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">constantVal</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">calculateIt</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constantVal <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>highValue<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// The \"this\" object in the setTimeout function used the </span>\r\n<span class=\"token comment\">// global highValue and constantVal variables, because the </span>\r\n<span class=\"token comment\">// reference to \"this\" in the setTimeout function refers </span>\r\n<span class=\"token comment\">// to the global window object, not to the myObj object as </span>\r\n<span class=\"token comment\">// we might expect.</span>\r\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">calculateIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 400</span>\r\n<span class=\"token comment\">// This is an important point to remember.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Do not Pollute the global Scope</h3>\n<p>Yes, it is true, do not pollute the global scope.</p>\n<p>Consider this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// These two variables are in the global scope </span>\r\n<span class=\"token comment\">// and they shouldn't be here</span>\r\n<span class=\"token keyword\">var</span> firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Full Name: \"</span> <span class=\"token operator\">+</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is the improved code with the proper way to avoid polluting the global scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Declare the variables inside the function </span>\r\n<span class=\"token comment\">// where they are local variables</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">var</span> firstName<span class=\"token punctuation\">,</span> lastName\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Full Name: \"</span> <span class=\"token operator\">+</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Note: The function in the last example is also in the global scope.</p>\n<h2>Variable hoisting</h2>\n<p>In most of the examples so far, we’ve used the <strong>var</strong> keyword to declare a variable, and we have initialized it\r\nwith a value. After declaring and initializing, we can access or reassign the variable.</p>\n<p>Remember this table?</p>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Scope</th>\n<th>Hoisting</th>\n<th>Can be reassigned</th>\n<th>Can be redeclared</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>var</td>\n<td>Function</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>let</td>\n<td>Block</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>const</td>\n<td>Block</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n<p>The <strong>var</strong> keyword hoisting, and as seen below, if we tries to use a variable before it has been declared and\r\ninitialized, it will return undefined</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Attempt to use a variable before declaring it</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\r\n\r\n<span class=\"token comment\">// Variable assignment</span>\r\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token number\">100</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If we omit the <strong>var</strong> keyword, we are no longer declaring the variable, only initializing it. It will return a\r\nReferenceError and halt the execution of the script.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Attempt to use a variable before declaring it</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: name is not defined</span>\r\n\r\n<span class=\"token comment\">// Variable assignment without var</span>\r\nname <span class=\"token operator\">=</span> <span class=\"token number\">100</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The reason for this is due to hoisting, a behavior of JavaScript in which variable AND function declarations are moved\r\nto the top of their scope. Since only the actual declaration is hoisted, not the initialization, the value in the first\r\nexample returns undefined.</p>\n<p>Another example to iterate and make it clearer.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"First Name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Last Name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n<span class=\"token comment\">// First Name: undefined</span>\r\n<span class=\"token comment\">// Last Name: Ford</span>\r\n\r\n<span class=\"token comment\">// The reason undefined prints first is because the </span>\r\n<span class=\"token comment\">// local variable name was hoisted to the top of </span>\r\n<span class=\"token comment\">// the function, which means it is this local variable </span>\r\n<span class=\"token comment\">// that get calls the first time.</span>\r\n<span class=\"token comment\">// This is how the code is actually processed by the </span>\r\n<span class=\"token comment\">// JavaScript engine:</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// name is hoisted, note that is undefined at this point, </span>\r\n  <span class=\"token comment\">// since the assignment happens below</span>\r\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span> \r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"First Name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// First Name: undefined</span>\r\n\r\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name is assigned a value</span>\r\n\r\n  <span class=\"token comment\">// now name is Ford</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Last Name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Last Name: Ford</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Function Declaration Overrides Variable Declaration When Hoisted</h3>\n<p>Both function declaration and variable declarations are hoisted to the top of the containing scope, and function\r\ndeclaration takes precedence over variable declarations, but not over variable assignment. As is noted above,\r\nvariable assignment is not hoisted, and neither is function assignment.</p>\n<p>As a reminder, this is a function assignment:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Here is a basic example to demonstrate:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Both the variable and the function are named myName</span>\r\n<span class=\"token keyword\">var</span> myName<span class=\"token punctuation\">;</span> \r\n<span class=\"token keyword\">function</span> <span class=\"token function\">myName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// The function declaration overrides the variable name</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function</span>\r\n\r\n<span class=\"token comment\">// But in this example, the variable assignment overrides </span>\r\n<span class=\"token comment\">// the function declaration</span>\r\n \r\n<span class=\"token comment\">// This is the variable assignment (initialization) </span>\r\n<span class=\"token comment\">// that overrides the function declaration.</span>\r\n<span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">;</span> \r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">myName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Henke\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It is important to note that function expressions, such as the example below, are not hoisted.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Lars\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Summary</h2>\n<p>Variables introduced with the keyword <strong>var</strong> have the potential of being affected by hoisting, a mechanism in\r\nJavaScript in which variable declarations are saved to memory. This may result in undefined variables in one’s code.\r\nThe introduction of <strong>let</strong> and <strong>const</strong> resolves this issue by throwing an error when attempting to use a variable before\r\ndeclaring it or attempting to declare a variable more than once.</p>\n<p>Personally I have stopped declaring variables with the keyword <strong>var</strong> and using only <strong>let</strong> or <strong>const</strong> and\r\nuse 'strict' mode and a linter in you editor to avoid mistakes.</p>"}},"pageContext":{"slug":"/articles/js-scope-hoisting-explained/"}},
    "staticQueryHashes": ["4011214723"]}