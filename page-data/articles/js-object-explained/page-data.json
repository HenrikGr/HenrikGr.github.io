{
    "componentChunkName": "component---src-templates-article-page-template-js",
    "path": "/articles/js-object-explained/",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"JavaScript Objects","subtitle":"What is JavaScript objects and how to deal with them","date":"2019-11-10","publishedBy":"Henrik Grönvall"},"excerpt":"JavaScript’s core, and most often used, and most fundamental data type is the Object data type. JavaScript has one\r\ncomplex data type, the Object data type, and…","timeToRead":10,"html":"<p>JavaScript’s core, and most often used, and most fundamental data type is the Object data type. JavaScript has one\r\ncomplex data type, the Object data type, and it has five simple data types:</p>\n<ul>\n<li>Number,</li>\n<li>String,</li>\n<li>Boolean,</li>\n<li>Undefined, and</li>\n<li>Null.</li>\n</ul>\n<p>Note that these simple, primitive, data types are immutable, cannot be changed, while objects are\r\nmutable, can be changed.</p>\n<h1>Object in JavaScript?</h1>\n<p>An object is an unordered list of primitive data types, and sometimes reference data types, that is\r\nstored as a series of name-value pairs and each item in the list is called a property.</p>\n<p>Consider this simple object:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> firstObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">favouriteAuthor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Think of an object as a list that contains items, and each item, a property or a method, in the list\r\nis stored by a name-value pair. Property names in the example above are firstName and favoriteAuthor\r\nand the values are “Henrik” and “John”. Property names can be a string, or a number, but if the property\r\nname is a number, it has to be accessed with the bracket notation.</p>\n<p>Here is an example of objects with numbers as the property name:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ageGroup <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">30</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Children\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">:</span><span class=\"token string\">\"Very Old\"</span> <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// This will throw an error​</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ageGroup<span class=\"token punctuation\">.</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// This is how you will access the value </span>\r\n<span class=\"token comment\">// of the property 30, to get value \"Children\"</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ageGroup<span class=\"token punctuation\">[</span><span class=\"token string\">\"30\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// It is best to avoid using numbers as property names.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As a JavaScript developer you will most often use the object data type, mostly for storing data and\r\nfor creating your own custom methods and functions.</p>\n<h2>Reference Data Type and Primitive Data Types</h2>\n<p>One of the main differences between reference data type and primitive data types is reference data\r\ntype’s value is stored as a reference, it is not stored directly on the variable, as a value as the\r\nprimitive data types are.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// The primitive data type String is stored as a value​ in the object data property name</span>\r\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tiger\"</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">var</span> anotherPerson <span class=\"token operator\">=</span> person <span class=\"token comment\">// anotherPerson = the value of person​</span>\r\n\r\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Woods\"</span> <span class=\"token comment\">// value of person changed​</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>anotherPerson<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Tiger</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Woods</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we copied the person object to another Person, but because the value in person was\r\nstored as a reference and not an actual value, when we changed the person.name property to “Woods”\r\nthe anotherPerson reflected the change because it never stored an actual copy of its own value of the\r\nperson’s properties, it only had a reference to it.</p>\n<h2>Object Data Properties Have Attributes</h2>\n<p>Each data property, object property that store data, has not only the name-value pair, but also 3\r\nattributes that are set to true by default:</p>\n<ol>\n<li>Configurable Attribute: Specifies whether the data property can be deleted or changed.</li>\n<li>Enumerable: Specifies whether the data property can be returned in a for/in loop.</li>\n<li>Writable: Specifies whether the data property can be changed.</li>\n</ol>\n<p>Note that ECMAScript 5 specifies accessor properties along with the data properties noted above,\r\nand the accessor properties are functions, getters and setters.</p>\n<h2>Creating Objects</h2>\n<p>These are the two common ways to create objects,</p>\n<ul>\n<li>object literal, and,</li>\n<li>object constructor.</li>\n</ul>\n<h3>1. Object Literals</h3>\n<p>The most common and, indeed, the easiest way to create objects is with the object literal described here:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// This is an empty object initialized </span>\r\n<span class=\"token comment\">// using the object literal notation​</span>\r\n<span class=\"token keyword\">var</span> myBook <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// This is an object with 4 items, again using object literal​</span>\r\n<span class=\"token keyword\">var</span> lemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">shape</span><span class=\"token operator\">:</span> <span class=\"token string\">\"round\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">sweetness</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function-variable function\">howSweetAmI</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hmm Hmm Good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2. Object constructor</h3>\n<p>The second most common way to create objects is with Object constructor. A constructor is a\r\nfunction used for initializing new objects, and you use the new keyword to call the constructor.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> orange <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\norange<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"orange\"</span>\r\norange<span class=\"token punctuation\">.</span>shape<span class=\"token operator\">=</span> <span class=\"token string\">\"round\"</span>\r\norange<span class=\"token punctuation\">.</span>sweetness <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\r\norange<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">howSweetAmI</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hmm Hmm Good and Healthy\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>While you can use some reserved word such as “for” as property names in your objects, it is wise\r\nto avoid this altogether. Objects can contain any other data type, including Numbers, Arrays, and\r\neven other Objects.</p>\n<h2>Practical Patterns for Creating Objects</h2>\n<p>For simple objects that may only ever be used once in your application to store data, the two\r\nmethods used above would suffice for creating objects. Imagine you have an application that displays\r\nfruits and detail about each fruit. All fruits in your application have these properties:</p>\n<ul>\n<li>color,</li>\n<li>shape,</li>\n<li>sweetness,</li>\n<li>cost, and a</li>\n<li>showName function.</li>\n</ul>\n<p>It would be quite tedious and counterproductive to type the following every time you want to create\r\na new fruit object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mangoFruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">sweetness</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">fruitName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">nativeToLand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"South America\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Central America\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function-variable function\">showName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fruitName<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token function-variable function\">nativeTo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nativeToLand<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eachCountry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grown in:\"</span> <span class=\"token operator\">+</span> eachCountry<span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you have 10 fruits, you will have to add the same code 10 times and, what if you had to make\r\na change to the nativeTo function? You will have to make the change in 10 different places.\r\nNow extrapolate this to adding objects for members on a website and suddenly you realized the manner\r\nin which we have created objects so far is not ideal objects that will have instances, particularly\r\nwhen developing large applications. To solve these repetitive problems, software engineers have invented\r\npatterns, solutions for repetitive and common tasks, to make developing applications more efficient and\r\nstreamlined.</p>\n<p>Here are two common patterns for creating objects.</p>\n<h3>1. Constructor pattern for creating objects</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theColor<span class=\"token punctuation\">,</span> theSweetness<span class=\"token punctuation\">,</span> theFruitName<span class=\"token punctuation\">,</span> theNativeToLand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> theColor\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sweetness <span class=\"token operator\">=</span> theSweetness\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fruitName <span class=\"token operator\">=</span> theFruitName\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nativeToLand <span class=\"token operator\">=</span> theNativeToLand\r\n\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">showName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fruitName<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">nativeTo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nativeToLand<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eachCountry</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grown in:\"</span> <span class=\"token operator\">+</span> eachCountry<span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>With this pattern in place, it is very easy to create all sorts of fruits. Thus:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> countries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"South America\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Central America\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"West Africa\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token keyword\">var</span> mangoFruit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yellow\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span> countries<span class=\"token punctuation\">)</span>\r\n\r\nmangoFruit<span class=\"token punctuation\">.</span><span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This is a Mango.</span>\r\nmangoFruit<span class=\"token punctuation\">.</span><span class=\"token function\">nativeTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// Grown in:South America</span>\r\n<span class=\"token comment\">// Grown in:Central America</span>\r\n<span class=\"token comment\">// Grown in:West Africa</span>\r\n\r\n<span class=\"token keyword\">var</span> apple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Green\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"United States\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\napple<span class=\"token punctuation\">.</span><span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This is an Apple.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you had to change the showName function, you only had to do it in one location.\r\nThe pattern encapsulates all the functionality and characteristics of all the fruits\r\nin by making just the single Fruit function with inheritance.</p>\n<h3>Note: Inherited property vs own property</h3>\n<p>An inherited property is defined on the object's prototype, for example;</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">someObject<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> “Henrik”</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>An own property is defined directly on the object itself, for example;</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> aBanana <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\naBanana<span class=\"token punctuation\">.</span>bitter <span class=\"token operator\">=</span> “some value”</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Now we define the bitter property directly on the aBanana object. Because we define\r\nthe bitter property directly on the aBanana object, it is an own property\r\nof aBanana, not an inherited property.</p>\n<p>To access a property of an object, we use object.property, for example;</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aBanana<span class=\"token punctuation\">.</span>bitter<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// “some value”</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To invoke a method of an object, we use object.method(), for example: First, lets add a method</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">aBanana<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">printStuff</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> “Printing”\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Now we can invoke the printStuff method:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">aBanana<span class=\"token punctuation\">.</span><span class=\"token function\">printStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>2. Prototype Pattern for Creating Objects</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"Yellow\"</span>\r\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sweetness <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\r\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fruitName <span class=\"token operator\">=</span> <span class=\"token string\">\"Generic Fruit\"</span>\r\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>nativeToLand <span class=\"token operator\">=</span> <span class=\"token string\">\"USA\"</span>\r\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">showName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fruitName<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">nativeTo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grown in:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nativeToLand<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is how we call the Fruit() constructor in this prototype pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> mangoFruit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nmangoFruit<span class=\"token punctuation\">.</span><span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Generic fruit</span>\r\nmangoFruit<span class=\"token punctuation\">.</span><span class=\"token function\">nativeTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// USA</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>How to access properties on an object?</h2>\n<p>The two primary ways of accessing properties of an object are with dot notation and bracket notation.</p>\n<h3>1. Dot notation</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// We have been using dot notation so far in the examples above, </span>\r\n<span class=\"token comment\">// here is another example again:</span>\r\n<span class=\"token keyword\">var</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \r\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Heroes all\"</span><span class=\"token punctuation\">,</span> \r\n  <span class=\"token literal-property property\">pages</span><span class=\"token operator\">:</span> <span class=\"token number\">280</span><span class=\"token punctuation\">,</span> \r\n  <span class=\"token literal-property property\">bookMark1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Page 20\"</span> \r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// To access the properties of the book object </span>\r\n<span class=\"token comment\">// with dot notation, you do this:</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Heroes all</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>pages<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 280</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2. Bracket notation</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// To access the properties of the book object </span>\r\n<span class=\"token comment\">// with bracket notation, you do this:</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Heroes all</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span><span class=\"token string\">\"pages\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 280</span>\r\n\r\n<span class=\"token comment\">// Or, in case you have the property name in a variable:</span>\r\n<span class=\"token keyword\">var</span> bookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"title\"</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span>bookTitle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Heroes all</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span><span class=\"token string\">\"bookMark\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Page 20</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Accessing a property on an object that does not exist will result in undefined.</p>\n<h2>Own and Inherited Properties</h2>\n<p>Objects have inherited properties and own properties. The own properties are properties that were\r\ndefined on the object, while the inherited properties were inherited from the object’s Prototype object.</p>\n<p>To find out if a property exists on an object, either as an inherited or an own property, you use the\r\nin operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Create a new school object with a property name schoolName</span>\r\n<span class=\"token keyword\">var</span> school <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \r\n  <span class=\"token literal-property property\">schoolName</span><span class=\"token operator\">:</span><span class=\"token string\">\"KTH\"</span> \r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Prints true because schoolName is an own property on the school object</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"schoolName\"</span> <span class=\"token keyword\">in</span> school<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span>\r\n\r\n<span class=\"token comment\">// Prints false because we did not define a schoolType property </span>\r\n<span class=\"token comment\">// on the school object, and neither did the object inherit a </span>\r\n<span class=\"token comment\">// schoolType property from its prototype object Object.prototype.</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"schoolType\"</span> <span class=\"token keyword\">in</span> school<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span>\r\n\r\n<span class=\"token comment\">// Prints true because the school object inherited the toString </span>\r\n<span class=\"token comment\">// method from Object.prototype.</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> school<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>hasOwnProperty</h2>\n<p>To find out if an object has a specific property as one of its own property, you use the\r\nhasOwnProperty method. This method is very useful because from time to time you need to\r\nenumerate an object and, you want only the own properties, not the inherited ones.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Create a new school object with a property name schoolName</span>\r\n<span class=\"token keyword\">var</span> school <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \r\n  <span class=\"token literal-property property\">schoolName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"KTH\"</span> \r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Prints true because schoolName is an own property on the school object</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>school<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"schoolName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\r\n<span class=\"token comment\">// Prints false because the school object inherited the toString method from</span>\r\n<span class=\"token comment\">// Object.prototype, therefore toString is not an own property of the school</span>\r\n<span class=\"token comment\">// object.</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>school<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Accessing and Enumerating Properties on Objects</h2>\n<p>To access the enumerable (own and inherited) properties on objects, you use the for/in loop\r\nor a general for loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Create a new school object with 3 own properties: </span>\r\n<span class=\"token comment\">// schoolName, schoolAccredited, and schoolLocation.</span>\r\n<span class=\"token keyword\">var</span> school <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">schoolName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"KTH\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">schoolAccredited</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">schoolLocation</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Stockholm\"</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Use of the for/in loop to access the properties in the school object</span>\r\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> eachItem <span class=\"token keyword\">in</span> school<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eachItem<span class=\"token punctuation\">)</span>\r\n  <span class=\"token comment\">// Prints schoolName, schoolAccredited, schoolLocation​</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Accessing Inherited Properties</h2>\n<p>Properties inherited from Object.prototype are not enumerable, so the for/in loop does not show them.\r\nHowever, inherited properties that are enumerable are revealed in the for/in loop iteration.\r\nFor example: Use of the for/in loop to access the properties in the school object</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> eachItem <span class=\"token keyword\">in</span> school<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eachItem<span class=\"token punctuation\">)</span>\r\n  <span class=\"token comment\">// Prints schoolName, schoolAccredited, schoolLocation</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Create a new HigherLearning function that the school </span>\r\n<span class=\"token comment\">// object will inherit from.</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">HigherLearning</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>educationLevel <span class=\"token operator\">=</span> <span class=\"token string\">\"University\"</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Implement inheritance with the HigherLearning constructor</span>\r\n<span class=\"token keyword\">var</span> school <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HigherLearning</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nschool<span class=\"token punctuation\">.</span>schoolName <span class=\"token operator\">=</span> <span class=\"token string\">\"MIT\"</span>\r\nschool<span class=\"token punctuation\">.</span>schoolAccredited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\r\nschool<span class=\"token punctuation\">.</span>schoolLocation <span class=\"token operator\">=</span> <span class=\"token string\">\"Massachusetts\"</span>\r\n\r\n<span class=\"token comment\">// Use of the for/in loop to access the properties in the school object</span>\r\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> eachItem <span class=\"token keyword\">in</span> school<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eachItem<span class=\"token punctuation\">)</span>\r\n  <span class=\"token comment\">// Prints educationLevel, schoolName, schoolAccredited, and schoolLocation</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Since the “this” keyword in the HigherLearning Constructor points to the newly created object,\r\nin this case the school object, and therefore the educationLevel property will be created on the\r\nschool object, then it follows that educationLevel is not really inherited from the Constructor,\r\nbut rather, it is a property that is actually created (new property) on the school object upon\r\ninvocation of said school object.</p>\n<h2>Deleting Properties of an Object</h2>\n<p>To delete a property from an object, you use the delete operator.\r\nYou cannot delete properties that were inherited, nor can you delete properties with their attributes\r\nset to configurable. You must delete the inherited properties on the prototype object\r\n(where the properties were defined). Also, you cannot delete properties of the global object,\r\nwhich were declared with the var keyword. The delete operator returns true if the delete was successful.\r\nAnd surprisingly, it also returns true if the property to delete was nonexistent or the property could not\r\nbe deleted (such as non-configurable or not owned by the object).</p>\n<p>These examples illustrate:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> christmasList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">lars</span><span class=\"token operator\">:</span><span class=\"token string\">\"Book\"</span><span class=\"token punctuation\">,</span> \r\n  <span class=\"token literal-property property\">tobbe</span><span class=\"token operator\">:</span><span class=\"token string\">\"sweater\"</span> \r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">delete</span> christmasList<span class=\"token punctuation\">.</span>lars<span class=\"token punctuation\">;</span> <span class=\"token comment\">// deletes the lars property</span>\r\n\r\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> people <span class=\"token keyword\">in</span> christmasList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// Prints only tobbe</span>\r\n<span class=\"token comment\">// The lars property was deleted</span>\r\n\r\n<span class=\"token comment\">// returns true, but toString not deleted because it is an inherited method</span>\r\n<span class=\"token keyword\">delete</span> christmasList<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span> \r\n\r\n<span class=\"token comment\">// Here we call the toString method and it works just fine—wasn’t deleted </span>\r\nchristmasList<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"[object Object]\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Serialize and Deserialize Objects</h2>\n<p>To transfer your objects via HTTP or to otherwise convert it to a string, you will need to serialize it\r\n(convert it to a string); you can use the JSON.stringify function to serialize your objects.</p>\n<p>Note that prior to ECMAScript 5, you had to use a popular json2 library (by Douglas Crockford) to get the\r\nJSON.stringify function. It is now standardized in ECMAScript 5. To Deserialize your object (convert it to\r\nan object from a string), you use the JSON.parse function from the same json2 library.\r\nThis function too has been standardized by ECMAScript 5.\r\nJSON.stringify Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> christmasList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">lars</span><span class=\"token operator\">:</span><span class=\"token string\">\"Book\"</span><span class=\"token punctuation\">,</span> \r\n  <span class=\"token literal-property property\">lisa</span><span class=\"token operator\">:</span><span class=\"token string\">\"sweater\"</span><span class=\"token punctuation\">,</span> \r\n  <span class=\"token literal-property property\">lara</span><span class=\"token operator\">:</span><span class=\"token string\">\"iPad\"</span> \r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>christmasList<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// Prints this string: \"{\"lars\":\"Book\",\"lisa\":\"sweater\",\"lara\":\"iPad\"}\"</span>\r\n\r\n<span class=\"token comment\">// To print a stringified object with formatting, </span>\r\n<span class=\"token comment\">// add \"null\" and \"4\" as parameters:</span>\r\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>christmasList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// \"{\"lars\": \"Book\",\"lisa\": \"sweater\",\"lara\": \"iPad\"}\"</span>\r\n\r\n<span class=\"token comment\">// JSON.parse Examples</span>\r\n<span class=\"token comment\">// The following is a JSON string, so we cannot access the </span>\r\n<span class=\"token comment\">// properties with dot notation (like christmasListStr.mike)</span>\r\n<span class=\"token keyword\">var</span> christmasListStr <span class=\"token operator\">=</span> <span class=\"token string\">'{ \"lars\":\"Book\",\"lisa\":\"sweater\",\"lara\":\"iPad\" }'</span>\r\n\r\n<span class=\"token comment\">// Let’s convert it to an object</span>\r\n<span class=\"token keyword\">var</span> christmasListObj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span> <span class=\"token punctuation\">(</span>christmasListStr<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// Now that it is an object, we use dot notation</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>christmasListObj<span class=\"token punctuation\">.</span>lars<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Book</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}},"pageContext":{"slug":"/articles/js-object-explained/"}},
    "staticQueryHashes": ["4011214723"]}