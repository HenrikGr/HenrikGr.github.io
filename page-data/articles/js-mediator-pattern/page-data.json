{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/js-mediator-pattern/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Handle complex objects in JavaScript with Mediator pattern","subtitle":"Use mediator pattern to handle objects that needs to know about each other's state","date":"2020-01-25","publishedBy":"Henrik Grönvall"},"excerpt":"Working as a consultant in the software industry is a real challenge in many ways, and as a self-employed consultant\nit's even more. There are different roles I…","timeToRead":5,"html":"<p>Working as a consultant in the software industry is a real challenge in many ways, and as a self-employed consultant\nit's even more. There are different roles I need to handle and to not suffer my core knowledge - develop software -\nI try to think about software development the same way I thought about Tennis when I was younger;</p>\n<blockquote>\n<p>Most people have heard about, \"to master something, you need to practice that thing 10 000 times.\" </p>\n</blockquote>\n<p>It's is a phrase very common in the sports world. I think it was Willi Railo, the Norwegian sport's psychologist, that\nfirst wrote about it in his book, 'Best When it Counts'.</p>\n<p>As a young aspiring Tennis player, I read that book many times and realized it takes time, and a lot of practice  to get\nIvan Lendl's smashing forehand or Mats Wilander's ability to foresee the next move. I was born with John McEnroe's\ntemperament so everything I needed to do was practice. :-)</p>\n<p>As a self-employed consultant, I have no goal to be a top sales person, I don't want to master marketing either,\nhowever, I want to always stay on top when it comes to software development and want to improve my communication skills. </p>\n<p>That's wy I'm writing articles about my training, and I spend a lot of time training and love it. </p>\n<p>In this article I choose to write about a quiet complex pattern that I can never train enough on - the mediator pattern. </p>\n<h1>The mediator pattern</h1>\n<p>The Mediator pattern provides central authority over a group of objects by encapsulating how these objects interact.\nThis model is useful for scenarios where there is a need to manage complex conditions in which every object is aware\nof any state change in any other object in the group.</p>\n<p>The Mediator patterns are useful in the development of complex forms. Take for example a page in which you enter options\nto make a flight reservation. A simple Mediator rule would be: you must enter a valid departure date, a valid return\ndate, the return date must be after the departure date, a valid departure airport, a valid arrival airport,\na valid number of travelers, and only then the Search button can be activated.</p>\n<p>Another example of Mediator is that of a chat room controlling messages sent and received between participants. </p>\n<h1>Chat room example</h1>\n<p>In the example code we have four participants that are joining a chat session by registering with a chat room\n(the Mediator). Each participant is represented by a Participant object. Participants send messages to each other and\nthe ChatRoom handles the routing logic.</p>\n<p>The chat room;</p>\n<ul>\n<li>defines an interface for communicating with Participant objects,</li>\n<li>maintain references to Participant objects,</li>\n<li>manages central control over operations for sending and receiving messages.</li>\n</ul>\n<p>The participants;</p>\n<ul>\n<li>objects that are being mediated by the Mediator,</li>\n<li>each instance maintains a reference to the Mediator,</li>\n<li>in this demo, stores received messages to the mediator logger store to keep history of all messages sent.</li>\n</ul>\n<p>First we set up the code for the participants.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n * These symbols are used to represent own properties that should not be part of\n * the public interface. We can however choose to do so by getters and setters.\n * You could also use ES2019 private fields, but those\n * are not yet widely available as of the time of my writing.\n */</span>\n<span class=\"token keyword\">const</span> participantName <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'participantName'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> chatRoom <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chatRoom'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * Participants class - send and receive messages from other participants\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Participant</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Name of the participant\n     */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>participantName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> name\n    <span class=\"token comment\">/**\n     * Reference to the chat room - is set after registration to a chat room\n     */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>chatRoom<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Getter for the participantName property\n   * @returns {string}\n   */</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">participantName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>participantName<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Setter for the chat room property\n   * @param {ChatRoom} chatRoom - chat room instance\n   */</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">chatRoom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chatRoom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>chatRoom<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chatRoom\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Send a message via the chatRoom (mediator)\n   * @param {string} message - message\n   * @param {Participant} receiver - participant object to receive the message\n   */</span>\n  <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>chatRoom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Receive message from the chatRoom - is delegated to the chatRoom object\n   * @param {string} message - message\n   * @param {Participant} sender - participant object that sent the message\n   * @remarks Store the received message in the chat room logger for this demo.\n   */</span>\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> sender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>chatRoom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> sender<span class=\"token punctuation\">.</span>participantName <span class=\"token operator\">+</span> <span class=\"token string\">' to '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>participantName <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> message\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The participant object is simple and have an interface containing a property setter to set the chat room,\na property getter to get the name of the participant and public methods to send and receive messages. The\nreceive method is delegated to the chat room, and the send method invokes the send method of the chat room.</p>\n<p>Now, lets create the code for the chat room.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n * These symbols are used to represent own properties that should not be part of\n * the public interface. We can however choose to do so by getters and setters.\n * You could also use ES2019 private fields, but those\n * are not yet widely available as of the time of my writing.\n */</span>\n<span class=\"token keyword\">const</span> room <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'room'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> participants <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'participants'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logger'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * The mediator\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChatRoom</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Name of the chat room\n     */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>room<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> name\n    <span class=\"token comment\">/**\n     * Store for participants\n     */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>participants<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * Logger store for all messages in this chat room\n     */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>logger<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Setter for the message logger\n   * @param {string} message - message to store\n   */</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>logger<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>logger<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> message <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Get all logged messages\n   * @returns {string}\n   */</span>\n  <span class=\"token function\">getLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Log from chat room: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>room<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>logger<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Register a participant\n   * @param {Participant} participant - participant to register\n   */</span>\n  <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">participant</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Update reference store</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>participants<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>participant<span class=\"token punctuation\">.</span>participantName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> participant\n\n    <span class=\"token comment\">// Bind the participant with the this chat room</span>\n    participant<span class=\"token punctuation\">[</span>chatRoom<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Rout messages\n   * @param {string} message - message to be routed\n   * @param {Participant} sender - participant object that sends a message\n   * @param {Participant} receiver - participant object to receive the message\n   */</span>\n  <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> sender<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If no receiver specified - broadcast to all but sender</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> participant <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>participants<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Filter out sender</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>participant <span class=\"token operator\">!==</span> sender<span class=\"token punctuation\">.</span>participantName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Call the participant's receive method</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>participants<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>participant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> sender<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Call the participant's receive method</span>\n      receiver<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> sender<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The mediator, the chat room class, is a little more complex and have a property setter to update the internal logger\nstore with a history of all messages sent and public methods, getLog() to get all messages from the logger store,\nregister() to register a participant for the chat room, and send() method that is responsible for the routing logic\nbetween all participants.</p>\n<p>Let's test this, here come a small example og how to use it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// create participants</span>\n<span class=\"token keyword\">let</span> yoko <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Participant</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Yoko'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Participant</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> paul <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Participant</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Paul'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> ringo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Participant</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ringo'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Create a chat room</span>\n<span class=\"token keyword\">let</span> chatRoom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChatRoom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Beatles'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Register participant to the chat room  </span>\nchatRoom<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>yoko<span class=\"token punctuation\">)</span>\nchatRoom<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">)</span>\nchatRoom<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>paul<span class=\"token punctuation\">)</span>\nchatRoom<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>ringo<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Send messages</span>\nyoko<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All you need is love.'</span><span class=\"token punctuation\">)</span>\nyoko<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I love you John.'</span><span class=\"token punctuation\">)</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey, no need to broadcast.'</span><span class=\"token punctuation\">,</span> yoko<span class=\"token punctuation\">)</span>\npaul<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ha, I heard that!'</span><span class=\"token punctuation\">)</span>\nringo<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Paul, what do you think?'</span><span class=\"token punctuation\">,</span> paul<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Get the messages sent from the logger store</span>\n<span class=\"token keyword\">let</span> log <span class=\"token operator\">=</span> chatRoom<span class=\"token punctuation\">.</span><span class=\"token function\">getLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Outputs</span>\n<span class=\"token comment\">//  'Log from chat room: Beatles' + '\\n' +</span>\n<span class=\"token comment\">//  'Yoko to John: All you need is love.' + '\\n' +</span>\n<span class=\"token comment\">//  'Yoko to Paul: All you need is love.' + '\\n' +</span>\n<span class=\"token comment\">//  'Yoko to Ringo: All you need is love.' + '\\n' +</span>\n<span class=\"token comment\">//  'Yoko to John: I love you John.' + '\\n' +</span>\n<span class=\"token comment\">//  'Yoko to Paul: I love you John.' + '\\n' +</span>\n<span class=\"token comment\">//  'Yoko to Ringo: I love you John.' + '\\n' +</span>\n<span class=\"token comment\">//  'John to Yoko: Hey, no need to broadcast.' + '\\n' +</span>\n<span class=\"token comment\">//  'Paul to Yoko: Ha, I heard that!' + '\\n' +</span>\n<span class=\"token comment\">//  'Paul to John: Ha, I heard that!' + '\\n' +</span>\n<span class=\"token comment\">//  'Paul to Ringo: Ha, I heard that!' + '\\n' +</span>\n<span class=\"token comment\">//  'Ringo to Paul: Paul, what do you think?' + '\\n'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>That's it for now.</p>"}},"pageContext":{"slug":"/articles/js-mediator-pattern/"}},"staticQueryHashes":["2940938484"]}