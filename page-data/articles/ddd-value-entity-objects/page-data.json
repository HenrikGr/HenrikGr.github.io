{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/ddd-value-entity-objects/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Domain Driven Design - Entity and Value objects","subtitle":"A small peek into how DDD can help you focus on the right thing","date":"2021-02-23","publishedBy":"Henrik Grönvall"},"excerpt":"When I used to start a new Node.js project, I usually started with analyzing and modelling the RESTful API and\npossible the database schemas and models. This…","timeToRead":8,"html":"<p>When I used to start a new Node.js project, I usually started with analyzing and modelling the RESTful API and\npossible the database schemas and models. This means I would mock the data and wire up som basic route\nhandlers, controllers, for different RESTful endpoints to ultimately test them with Postman. </p>\n<p>In other words, I was building my app from the database, or the RESTFul API up and thinking CRUD first.\nIf you have read the <a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">Clean Architecture</a>,\nby Uncle Bob, you know you should never put business logic in the Controllers and that's exactly what\nthis approach to starting lead to.</p>\n<p>An example of a controller when using this approach could look like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MovieController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> models\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">models</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>models <span class=\"token operator\">=</span> models\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">notFound</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">rentMovie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> movieId<span class=\"token punctuation\">,</span> customerId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request\n    <span class=\"token comment\">// ORM models</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Movie<span class=\"token punctuation\">,</span> Customer<span class=\"token punctuation\">,</span> RentedMovie<span class=\"token punctuation\">,</span> CustomerCharge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Get the raw orm records, as JSON</span>\n    <span class=\"token keyword\">const</span> movie <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Movie<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> movie_id<span class=\"token operator\">:</span> movieId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> customer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Customer<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> customer_id<span class=\"token operator\">:</span> customerId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 401 error if not found</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>movie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notFound</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token string\">'Movie not found'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 401 error if not found</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>customer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notFound</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token string\">'Customer not found'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Create a record that a movie was rented</span>\n    <span class=\"token keyword\">await</span> RentedMovie<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> customer_id<span class=\"token operator\">:</span> customerId<span class=\"token punctuation\">,</span> movie_id<span class=\"token operator\">:</span> movieId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create a charge for this customer.</span>\n    <span class=\"token keyword\">await</span> CustomerCharge<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> amount<span class=\"token operator\">:</span> movie<span class=\"token punctuation\">.</span>rentPrice <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is quick approach and could get into trouble as soon changes in the business rules are required.</p>\n<h1>Business rules in CRUD first code</h1>\n<p>Let's say we need to apply the business rules; The customer should not be able to rent a\nvideo if they;</p>\n<ul>\n<li>have rented the maximum amount of movies at one time,</li>\n<li>have unpaid balances.</li>\n</ul>\n<p>An implementation of this in the controller could then look like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MovieController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> models\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">models</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>models <span class=\"token operator\">=</span> models\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">notFound</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">rentMovie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> movieId<span class=\"token punctuation\">,</span> customerId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request\n    \n    <span class=\"token comment\">// We need to add another model - CustomerPayment </span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> \n      Movie<span class=\"token punctuation\">,</span> \n      Customer<span class=\"token punctuation\">,</span> \n      RentedMovie<span class=\"token punctuation\">,</span> \n      CustomerCharge<span class=\"token punctuation\">,</span>\n      CustomerPayment\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> movie <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Movie<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> movie_id<span class=\"token operator\">:</span> movieId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> customer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Customer<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> customer_id<span class=\"token operator\">:</span> customerId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>movie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notFound</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token string\">'Movie not found'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>customer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notFound</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token string\">'Customer not found'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// Get the number of movies that this user has rented</span>\n    <span class=\"token keyword\">const</span> rentedMovies <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> RentedMovie<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> customer_id<span class=\"token operator\">:</span> customerId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> numberRentedMovies <span class=\"token operator\">=</span> rentedMovies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Enforce the rule</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numberRentedMovies <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Customer already has the maxiumum number of rented movies'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Get all the charges and payments so that we can </span>\n    <span class=\"token comment\">// determine if the user still owes money</span>\n    <span class=\"token keyword\">const</span> charges <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> CustomerCharge<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> customer_id<span class=\"token operator\">:</span> customerId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> payments <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> CustomerPayment<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> customer_id<span class=\"token operator\">:</span> customerId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> chargeDollars <span class=\"token operator\">=</span> charges<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousCharge<span class=\"token punctuation\">,</span> nextCharge</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> previousCharge<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">+</span> nextCharge<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> paymentDollars <span class=\"token operator\">=</span> payments<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousPayment<span class=\"token punctuation\">,</span> nextPayment</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> previousPayment<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">+</span> nextPayment<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Enforce the second business rule</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chargeDollars <span class=\"token operator\">></span> paymentDollars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Customer has outstanding balance unpaid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Create a record that a movie was rented</span>\n    <span class=\"token keyword\">await</span> RentedMovie<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> customer_id<span class=\"token operator\">:</span> customerId<span class=\"token punctuation\">,</span> movie_id<span class=\"token operator\">:</span> movieId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create a charge for this customer.</span>\n    <span class=\"token keyword\">await</span> CustomerCharge<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> amount<span class=\"token operator\">:</span> movie<span class=\"token punctuation\">.</span>rentPrice <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This solution works for CRUD design first approach, but there are drawbacks.</p>\n<h2>Encapsulation</h2>\n<p>If the complexity of our business model grows, we could move the domain logic to the service\nbut, it is just to re-locate the same logic somewhere else and by doing so, we will risk ending\nup with an anemic domain model.</p>\n<blockquote>\n<p>Wikipedia says an Anemic Domain Model \"is the use of a software domain model where the domain objects\ncontain little or no business logic (validations, calculations, business rules etc.)\"</p>\n</blockquote>\n<p>In other words. When the classes that describe the models (movie and customer), and the classes\nthat perform operations on the model are separate we enter the anemic model land. The services contain\nall the domain logic while the domain objects themselves contain practically none.</p>\n<blockquote>\n<p>Anemic Domain Models are largely the cause of a lack of encapsulation and isolation.</p>\n</blockquote>\n<h2>Discoverability</h2>\n<p>When you look at a class, and it’s methods for the first time, it should accurately describe to you the\ncapabilities and limitations of that class. When we co-locate the capabilities and rules of the Customer\nto an infrastructure concern (controllers), we lose some of that discoverability for what a Customer can\ndo and when it’s allowed to do it.</p>\n<h2>CRUD design is a transaction script approach</h2>\n<p>According to Martin Fowler, the CRUD design approach sound to me that it is a transaction script approach.</p>\n<p>See: <a href=\"https://martinfowler.com/eaaCatalog/transactionScript.html\">Transaction Script</a></p>\n<h1>The case for DDD and domain model first</h1>\n<p>In DDD, we can from a declarative perspective, design the business rules that answer what and when\nsomething can be done which make it much more readable, flexible and expressive.</p>\n<p>If we were to take our previous example and using DDD, the controller code would probably look\nsomething like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MovieController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> movieRepo<span class=\"token operator\">:</span> IMovieRepo<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> customerRepo<span class=\"token operator\">:</span> ICustomerRepo<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">movieRepo<span class=\"token operator\">:</span> IMovieRepo<span class=\"token punctuation\">,</span> customerRepo<span class=\"token operator\">:</span> ICustomerRepo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>movieRepo <span class=\"token operator\">=</span> movieRepo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>customerRepo <span class=\"token operator\">=</span> customerRepo<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">rentMovie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> movieId<span class=\"token punctuation\">,</span> customerId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request\n    \n    <span class=\"token keyword\">const</span> movie<span class=\"token operator\">:</span> Movie <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> movieRepo<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>movieId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> customer<span class=\"token operator\">:</span> Customer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> customerRepo<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>customerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>movie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Movie not found'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>customer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Customer not found'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// The declarative magic happens here.</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">const</span> rentMovieResult<span class=\"token operator\">:</span> Result<span class=\"token operator\">&lt;</span>Customer<span class=\"token operator\">></span> <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">rentMovie</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rentMovieResult<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>rentMovieResult<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> customerRepo<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So what is the difference? The controller does not implement any business rules, instead,\nenforcing of the business rules are now implemented in the movie and customer objects. The movie\nand the customer objects are entity objects, created by the repository and mappers. I will write about repositories\nand mappers in future articles. That's why the method rentMovie, in the entity object customer, can perform it's magic,\nit knows about what and when it can rent a video. </p>\n<p>When model the domain logic we want to express what it;</p>\n<ul>\n<li>can do,</li>\n<li>when it can do it, and</li>\n<li>what conditions dictate when it can do that thing.</li>\n</ul>\n<p>That also means we are enforcing model invariants, which is the same as ensuring the data integrity\nof an object and, by ensuring data integrity, we mean;</p>\n<ul>\n<li>what shape is this data allowed to take,</li>\n<li>what methods can be called and when,</li>\n<li>what are the required parameters and pre-conditions in order to create this object.</li>\n</ul>\n<p>A business object methods need to preserve the invariants of an object and to constrain the state stored\nin the object to protect the model from corruption. </p>\n<h2>Entity objects</h2>\n<p>In DDD, to model the domain logic, we are using entities (or value objects), and implements the business logic.\nEntity objects are different to value objects and are characterized by;</p>\n<ul>\n<li>have a lifespan, a history of what happened to them and how they changed,</li>\n<li>they are mutable, their internal state can change during their lifespan,</li>\n<li>have their own intrinsic identity, which refers to a unique id, if data in two entity instances\nis the same (except for the id property), we don’t deem them as equivalent.</li>\n</ul>\n<p>When coding in Typescript and Node.js, I have created an abstract Entity class that I inherit from\nwhen I model my domain entity classes that fulfill the characteristics of an entity object.</p>\n<p>Here is my current implementation of the abstract Entity class.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">// A class generating unique id</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UniqueEntityID <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./UniqueEntityID'</span>\n\n<span class=\"token comment\">/**\n * Entity type comparator\n * @param v\n */</span>\n<span class=\"token keyword\">const</span> isEntity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> v <span class=\"token keyword\">is</span> Entity<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> v <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Entity</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Entity class implementation\n * Use Entity to entities to enforce model invariants\n * @class\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entity<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * The id of the entity and it's readonly since it\n   * should not be able to change after instantiated\n   */</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> _id<span class=\"token operator\">:</span> UniqueEntityID\n  <span class=\"token comment\">/**\n   * The props of the entity class are stored in this.props\n   * to leave to the subclass to decide getters and setters\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> props<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n\n  <span class=\"token comment\">/**\n   * Creates a new Entity instance\n   * @param props\n   * @param id\n   */</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> UniqueEntityID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id <span class=\"token operator\">=</span> id <span class=\"token operator\">?</span> id <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UniqueEntityID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Equal comparator based on referential equality\n   * @param object\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>object<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Entity<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEntity</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Value objects</h2>\n<p>Value objects are more used in DDD, and their characteristics are;</p>\n<ul>\n<li>they do not have a lifespan,</li>\n<li>they can not live by their own, they should belong to an Entity object,</li>\n<li>they can not be persisted on their own, they are persisted by their entities they belong to,</li>\n<li>they do not have an id, they are equal by their attributes (value),</li>\n<li>they are immutable, and thus representing a snapshot of the state.</li>\n</ul>\n<p>Here is my current implementation of the abstract ValueObject class.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Value object properties interface\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IValueObjectProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Abstract class implements value objects\n * @class\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValueObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> IValueObjectProps<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * The props of the value object are stored in this.props\n   * to leave to the subclass to decide getters\n   */</span>\n  <span class=\"token keyword\">public</span> props<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n\n  <span class=\"token comment\">/**\n   * Creates a new ValueObject instance\n   * @param props\n   */</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Equality comparator for value objects\n   * @param vo\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>vo<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ValueObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vo <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> vo <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vo<span class=\"token punctuation\">.</span>props <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>vo<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>How to recognize a value object in your domain model?</h2>\n<p>It's not easy at first to know if a business object should be implemented as an Entity or, as a\nValue object, but the notion of an identity is helpful and could be a first guideline.</p>\n<blockquote>\n<p>Ask yourself if you can safely replace an instance class with another with the same attributes, if so,\nit should probably be a value object. </p>\n</blockquote>\n<h2>Summary</h2>\n<p>Domain-Driven Design is an approach to software development that centers the development on programming\na domain model that has a rich understanding of the processes and rules of a domain. It is a natural starting\npoint for any project to start to evaluate the business logic. You focus from the get going on what should be\ndone, when it should be done and so on instead of focus on infrastructure concerns.</p>\n<p>I have tried to describe that separation of concerns, single responsibility principles and, a clean architecture\nreally matters and are important even if you need to get something up and running quickly, you want to respond\nto prototype apps, you are working on a small app, etc. </p>\n<p>I wrote in my previous article about the importance of the Ubiquitous Language and its role to understand and evaluate\nthe business model. This language should be based on the Domain Model used in the software - hence the need for it to\nbe rigorous, since software doesn't cope well with ambiguity.</p>\n<p>In a future article I will cover another important aspect of DDD, use cases to describe the actors in a\nbusiness model and probably share more code that will include entity and value objects.</p>\n<p>References:</p>\n<ul>\n<li>Martin Fowler: <a href=\"https://www.martinfowler.com/bliki/AnemicDomainModel.html\">Anemic Domain Model</a></li>\n<li>Uncle Bob: <a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">Clean Architecture</a></li>\n</ul>"}},"pageContext":{"slug":"/articles/ddd-value-entity-objects/"}},"staticQueryHashes":["4011214723"]}