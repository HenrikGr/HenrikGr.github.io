{
    "componentChunkName": "component---src-templates-article-page-template-js",
    "path": "/articles/js-prototype-explained/",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"JavaScript prototype","subtitle":"JavaScript prototype in more details","date":"2019-11-11","publishedBy":"Henrik Grönvall"},"excerpt":"Prototype is a fundamental concept that every JavaScript developer must understand, and this article aims to explain\r\nJavaScript’s prototype in plain, detailed…","timeToRead":9,"html":"<p>Prototype is a fundamental concept that every JavaScript developer must understand, and this article aims to explain\r\nJavaScript’s prototype in plain, detailed language.</p>\n<h1>JavaScript prototype explained</h1>\n<ol>\n<li>JavaScript function has a prototype property</li>\n<li>JavaScript prototype has attribute</li>\n</ol>\n<h2>JavaScript function has a prototype property</h2>\n<p>The functions prototype property is empty by default, and you attach properties and methods on this prototype property\r\nwhen you want to implement inheritance.</p>\n<p>This prototype property is not enumerable; meaning it isn’t accessible in a for/in loop. But Firefox\r\nand most versions of Safari and Chrome have a __proto__ “pseudo” property (an alternative syntax) that\r\nallows you to access an object’s prototype property. You will likely never use this __proto__ pseudo\r\nproperty, but you should know that it exists and it is simply a way to access an object’s prototype\r\nproperty in some browsers.</p>\n<p>The prototype property is used primarily for inheritance; you add methods and properties on a function’s\r\nprototype property to make those methods and properties available to instances of that function.</p>\n<p>Consider this simple example of inheritance with the prototype property:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">PrintStuff</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myDocuments</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>documents <span class=\"token operator\">=</span> myDocuments\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// We add the print () method to PrintStuff prototype property </span>\r\n<span class=\"token comment\">// so that other instances (objects) can inherit it:</span>\r\n<span class=\"token class-name\">PrintStuff</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>documents<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Create a new object with the PrintStuff() constructor, thus </span>\r\n<span class=\"token comment\">// allowing this new object to inherit PrintStuff's properties and methods.</span>\r\n<span class=\"token keyword\">var</span> newObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStuff</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a new Object and I can print.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// newObj inherited all the properties and methods, including the </span>\r\n<span class=\"token comment\">// print method, from the PrintStuff function. Now newObj can call </span>\r\n<span class=\"token comment\">// print directly, even though we never created a print () method on it.</span>\r\nnewObj<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//I am a new Object and I can print.</span>\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>JavaScript prototype has attribute</h2>\n<p>Think of the prototype attribute as a characteristic of the object; this characteristic tells us\r\nthe object’s “parent”. In simple terms: An object’s prototype attribute points to the object’s\r\n“parent”, the object it inherited its properties from.</p>\n<p>The prototype attribute is normally referred to as the prototype object, and it is set automatically\r\nwhen you create a new object. To elaborate on this: Every object inherits properties from some other object,\r\nand it is this other object that is the object’s prototype attribute or “parent.”</p>\n<p>In the example code above, newObj‘s prototype is PrintStuff.prototype.\r\nNote: All objects have attributes just like object properties have attributes. And the object attributes\r\nare prototype, class, and extensible attributes. It is this prototype attribute that we are discussing\r\nin this second example. Also note that the __proto__ “pseudo” property contains an object’s prototype object.\r\nthe parent object it inherited its methods and properties from.</p>\n<h2>Constructor</h2>\n<p>A constructor is a function used for initializing new objects, and you use the new keyword to call the constructor.\r\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// This is the Account constructor to create </span>\r\n<span class=\"token comment\">// the userAccount object</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">var</span> userAccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Moreover, all objects that inherit from another object also inherit a constructor property, this constructor property\r\nis simply a property (like any variable) that holds or points to the constructor of the object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// The constructor in this example is Object() </span>\r\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// And if you later want to find the myObj constructor:</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Object()</span>\r\n\r\n<span class=\"token comment\">// Another example: Account () is the constructor</span>\r\n<span class=\"token keyword\">var</span> userAccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \r\n<span class=\"token comment\">// Find the userAccount object's constructor</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userAccount<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Account()</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Prototype Attribute of Objects Created with new Object() or Object Literal</h3>\n<p>All objects created with object literals and with the Object constructor inherits from Object.prototype.\r\nTherefore, Object.prototype is the prototype attribute (or the prototype object) of all objects created\r\nwith new Object() or with {}. Object.prototype itself does not inherit any methods or properties from\r\nany other object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// The userAccount object inherits from Object and as </span>\r\n<span class=\"token comment\">// such its prototype attribute is Object.prototype.</span>\r\n<span class=\"token keyword\">var</span> userAccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// This demonstrates the use of an object literal to </span>\r\n<span class=\"token comment\">// create the userAccount object; the userAccount object </span>\r\n<span class=\"token comment\">// inherits from Object; therefore, its prototype attribute </span>\r\n<span class=\"token comment\">// is Object.prototype just as the userAccount object does above.</span>\r\n<span class=\"token keyword\">var</span> userAccount <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> “Henrik” <span class=\"token punctuation\">}</span> </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Prototype Attribute of Objects Created With a Constructor Function</h3>\n<p>Objects created with the new keyword and any constructor other than the Object() constructor, get their\r\nprototype from the constructor function.</p>\n<p>For Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Account</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">var</span> userAccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \r\n<span class=\"token comment\">// userAccount initialized with the Account() constructor and as </span>\r\n<span class=\"token comment\">// such its prototype attribute (or prototype object) is Account.prototype.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Similarly, any array such as var myArray = new Array(), gets its prototype from Array.prototype\r\nand, it inherits Array.prototype’s properties.</p>\n<p>So, there are two general ways an object’s prototype attribute is set when an object is created:</p>\n<ol>\n<li>If an object is created with an object literal (var newObj = {}), it inherits properties from</li>\n</ol>\n<p>Object.prototype and, we say its prototype object (or prototype attribute) is Object.prototype.</p>\n<ol start=\"2\">\n<li>If an object is created from a constructor function such as new Object(), new Fruit() or</li>\n</ol>\n<p>new Array() or new Anything(), it inherits from that constructor (Object(), Fruit(),\r\nArray(), or Anything()). For example, with a function such as Fruit(), each time we create a\r\nnew instance of Fruit (var aFruit = new Fruit()), the new instance’s prototype is assigned the\r\nprototype from the Fruit constructor, which is Fruit.prototype. Any object that was created with\r\nnew Array() will have Array.prototype as its prototype. An object created with new Fruit() will\r\nhave Fruit.prototype as its prototype and any object created with the Object constructor Obj(),\r\nsuch as var anObj = new Object(), inherits from Object.prototype.</p>\n<blockquote>\n<p>It is important to know that in ECMAScript 5, you can create objects with an Object.create() method</p>\n</blockquote>\n<p>that allows you to set the new object’s prototype object.</p>\n<h2>Why is Prototype Important and When is it Used?</h2>\n<p>These are two important ways the prototype is used in JavaScript, as we noted above:</p>\n<h3>1. Prototype Property: Prototype-based Inheritance</h3>\n<p>Prototype is important in JavaScript because JavaScript does not have classical inheritance based on\r\nClasses, and therefore all inheritance in JavaScript is made possible through the prototype property.\r\nJavaScript has a prototype-based inheritance mechanism.</p>\n<p>Inheritance is a programming paradigm where objects, or Classes in some languages, can inherit properties\r\nand methods from other objects, or Classes. In JavaScript, you implement inheritance with the prototype\r\nproperty. For example, you can create a Fruit function, an object, since all functions in JavaScript are objects,\r\nand add properties and methods on the Fruit prototype property, and all instances of the Fruit function\r\nwill inherit all the Fruit’s properties and methods.</p>\n<p>Demonstration of Inheritance in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Plant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>country <span class=\"token operator\">=</span> <span class=\"token string\">\"Mexico\"</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isOrganic <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Add the showNameAndColor method to the Plant prototype property</span>\r\n<span class=\"token class-name\">Plant</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">showNameAndColor</span> <span class=\"token operator\">=</span>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" and my color is \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Add the amIOrganic method to the Plant prototype property</span>\r\n<span class=\"token class-name\">Plant</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">amIOrganic</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isOrganic<span class=\"token punctuation\">)</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am organic, Baby!\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruitName<span class=\"token punctuation\">,</span> fruitColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> fruitName\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> fruitColor\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Set the Fruit's prototype to Plant's constructor, </span>\r\n<span class=\"token comment\">// thus inheriting all of Plant.prototype methods and properties.</span>\r\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Plant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// Creates a new object, aBanana, with the Fruit constructor</span>\r\n<span class=\"token keyword\">var</span> aBanana <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Yellow\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// Here, aBanana uses the name property from the aBanana </span>\r\n<span class=\"token comment\">// object prototype, which is Fruit.prototype:</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aBanana<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Banana</span>\r\n\r\n<span class=\"token comment\">// Uses the showNameAndColor method from the Fruit object </span>\r\n<span class=\"token comment\">// prototype, which is Plant.prototype. The aBanana object </span>\r\n<span class=\"token comment\">// inherits all the properties and methods from both the </span>\r\n<span class=\"token comment\">// Plant and Fruit functions.</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aBanana<span class=\"token punctuation\">.</span><span class=\"token function\">showNameAndColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \r\n<span class=\"token comment\">// Print: I am a Banana and my color is yellow.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Note that the showNameAndColor method was inherited by the aBanana object even though\r\nit was defined all the way up the prototype chain on the Plant.prototype object.</p>\n<p>Indeed, any object that uses the Fruit() constructor will inherit all the Fruit.prototype\r\nproperties and methods and all the properties and methods from the Fruit’s prototype,\r\nwhich is Plant.prototype.</p>\n<p>This is the principal manner in which inheritance is implemented in JavaScript and the\r\nintegral role the prototype chain has in the process.</p>\n<h3>2. Prototype Attribute: Accessing Properties on Objects</h3>\n<p>Prototype is also important for accessing properties and methods of objects. The prototype\r\nattribute (or prototype object) of any object is the “parent” object where the inherited\r\nproperties were originally defined. This is loosely analogous to the way you might inherit\r\nyour surname from your father, he is your “prototype parent.” If we wanted to find out where\r\nyour surname came from, we would first check to see if you created it yourself; if not, the\r\nsearch will move to your prototype parent to see if you inherited it from him. If it was not\r\ncreated by him, the search continues to his father (your father’s prototype parent).</p>\n<p>Similarly, if you want to access a property of an object, the search for the property begins\r\ndirectly on the object. If the JS runtime can’t find the property there, it then looks for the\r\nproperty on the object’s prototype, the object it inherited its properties from.</p>\n<p>If the property is not found on the object’s prototype, the search for the property then moves\r\nto prototype of the object’s prototype (the father of the object’s father—the grandfather).\r\nAnd this continues until there is no more prototype (no more great-grand father; no more lineage to follow).\r\nThis in essence is the prototype chain: the chain from an object’s prototype to its prototype’s\r\nprototype and onwards. And JavaScript uses this prototype chain to look for properties and methods\r\nof an object.</p>\n<p>If the property does not exist on any of the object’s prototype in its prototype chain, then the\r\nproperty does not exist and undefined is returned.</p>\n<p>This prototype chain mechanism is essentially the same concept we have discussed above with the\r\nprototype-based inheritance, except we are now focusing specifically on how JavaScript accesses object\r\nproperties and methods via the prototype object.</p>\n<p>This example demonstrates the prototype chain of an object’s prototype object:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myFriends <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pete\"</span> <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// To find the name property below, the search will begin </span>\r\n<span class=\"token comment\">// directly on the myFriends object and will immediately </span>\r\n<span class=\"token comment\">// find the name property because we defined the property </span>\r\n<span class=\"token comment\">// name on the myFriend object. This could be thought of as </span>\r\n<span class=\"token comment\">// a prototype chain with one link.</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFriends<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// In this example, the search for the toString() method will </span>\r\n<span class=\"token comment\">// also begin on the myFriends’ object, but because we never </span>\r\n<span class=\"token comment\">// created a toString method on the myFriends object, </span>\r\n<span class=\"token comment\">// the compiler will then search for it on the myFriends prototype </span>\r\n<span class=\"token comment\">// (the object which it inherited its properties from).</span>\r\n\r\n<span class=\"token comment\">// And since all objects created with the object literal inherits </span>\r\n<span class=\"token comment\">// from Object.prototype, the toString method will be found on </span>\r\n<span class=\"token comment\">// Object.prototype, see important note below for all properties </span>\r\n<span class=\"token comment\">// inherited from Object.prototype. </span>\r\n\r\nmyFriends<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Object.prototype Properties Inherited by all Objects</h2>\n<p>All objects in JavaScript inherit properties and methods from Object.prototype. These inherited properties\r\nand methods are constructor, hasOwnProperty (), isPrototypeOf (), propertyIsEnumerable (), toLocaleString (),\r\ntoString (), and valueOf ().</p>\n<p>ECMAScript 5 also adds 4 accessor methods to Object.prototype.\r\nHere is another example of the prototype chain:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">People</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>superstar <span class=\"token operator\">=</span> <span class=\"token string\">\"Michael Jackson\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// Define \"athlete\" property on the People prototype </span>\r\n<span class=\"token comment\">// so that \"athlete\" is accessible by all objects that </span>\r\n<span class=\"token comment\">// use the People() constructor.</span>\r\n<span class=\"token class-name\">People</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>athlete <span class=\"token operator\">=</span> <span class=\"token string\">\"Tiger Woods\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> famousPerson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nfamousPerson<span class=\"token punctuation\">.</span>superstar <span class=\"token operator\">=</span> <span class=\"token string\">\"Steve Jobs\"</span>\r\n\r\n<span class=\"token comment\">// The search for superstar will first look for the superstar </span>\r\n<span class=\"token comment\">// property on the famousPerson object, and since we defined </span>\r\n<span class=\"token comment\">// it there, that is the property that will be used. Because </span>\r\n<span class=\"token comment\">// we have overwritten the famousPerson’s superstar property </span>\r\n<span class=\"token comment\">// with one directly on the famousPerson object, the search will </span>\r\n<span class=\"token comment\">// NOT proceed up the prototype chain. </span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>famousPerson<span class=\"token punctuation\">.</span>superstar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Steve Jobs</span>\r\n\r\n<span class=\"token comment\">// Note that in ECMAScript 5 you can set a property to read only, </span>\r\n<span class=\"token comment\">// and in that case you cannot overwrite it as we just did.</span>\r\n\r\n<span class=\"token comment\">// This will show the property from the famousPerson prototype </span>\r\n<span class=\"token comment\">// (People.prototype), since the athlete property was not defined </span>\r\n<span class=\"token comment\">// on the famousPerson object itself.</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>famousPerson<span class=\"token punctuation\">.</span>athlete<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Tiger Woods</span>\r\n\r\n<span class=\"token comment\">// In this example, the search proceeds up the prototype chain and </span>\r\n<span class=\"token comment\">// find the toString method on Object.prototype, from which the </span>\r\n<span class=\"token comment\">// Fruit object inherited—all objects ultimately inherits from </span>\r\n<span class=\"token comment\">// Object.prototype as we have noted before.</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>famousPerson<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Object]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>Note: All built-in constructors, Array(), Number(), String(), etc, were created from the Object constructor,</p>\n</blockquote>\n<p>and as such their prototype is Object.prototype.</p>"}},"pageContext":{"slug":"/articles/js-prototype-explained/"}},
    "staticQueryHashes": ["4011214723"]}