{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/node-local-development-ssl/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Using locally trusted certificates in Node.js","subtitle":"Manage you own CA without manual configuration","date":"2021-04-01","publishedBy":"Henrik Grönvall"},"excerpt":"In most cases you do not need to set up your Node.js server to us HTTPS/SSL since it is very common\nto deploy your backend behind a reverse proxy like Nginx…","timeToRead":4,"html":"<p>In most cases you do not need to set up your Node.js server to us HTTPS/SSL since it is very common\nto deploy your backend behind a reverse proxy like Nginx which serves certificates. If you are using\nExpress.js you set trust proxy to true and all is fine.</p>\n<h1>When to use your own CA root certificate in Node.js?</h1>\n<p>If your Node app should work as a client in that it needs to call various backend services protected\nby HTTPS it could be complicated. By default, Node.js is built with a bundle of commonly used CA root\ncertificates, but we still may encounter errors when your Node app makes an HTTPS API call to backend\nservices hosted with self-signed certificates (i.e. company-specific private CA). The errors you can get\noriginate from the SSL hand-shake process. When a client begins to establish a connection to server, a\nTLS handshake happens. It is a series of messages exchanged between the client and server, in which they\nagree with the version of the TLS and cipher suites to use, verify the identity of the server and generate\nthe session keys. Most of the time, these errors are thrown because the client is not able to verify the\nserver certificate because the server certificate is self-signed. The solution to this is to specify the\nCA certificate that is expected from the server. In other words, the common name of the certificate needs\nto match with the server certificate.</p>\n<p>In Node.js you can do this by the environment variable NODE<em>EXTRA</em>CA<em>CERTS. From Node version 7.3.0,\nNODE</em>EXTRA<em>CA</em>CERTS environment variable is introduced to pass in a CA certificate file. This allows the\n“root” CAs to be extended with the extra certificates. The file should consist of one or more trusted\ncertificates in PEM format.</p>\n<p>I was also investigating an OICD Provider package in order to play with Open ID Connect and realized I\nhave to run my backend using HTTPS/SSL.</p>\n<h2>Use your own CA root certificate in Node.js</h2>\n<p>At first, I thought I should skip this, but it is fun to refresh my memory and learn so here comes\na description of my journey to set up att local development environment to use HTTPS/SSL on the backend,\ninstalling a local certificate authorities, CA, and updating the host file on my Windows 10 computer.</p>\n<p>I googled and found a tool, <strong>mkcert</strong>, that seemed to be the perfect match. With <strong>mkcert</strong>, you do not\nneed to use certificates from real certificate authorities (CAs) for development. Using certificates\nfrom real CAs can be dangerous or impossible for hosts like example.test, localhost or 127.0.0.1, and\nself-signed certificates can cause trust errors.</p>\n<p>The solution can be to managing your own CA, but it usually involves arcane commands, specialized knowledge\nand manual steps. <strong>mkcert</strong> looked very easy to use and, I decided to have a go.</p>\n<h2>Use your own certificate authorities with mkcert</h2>\n<p>When you install <strong>mkcert</strong> the first time, it creates and installs a local CA in the root store, and\ngenerates locally trusted certificates. It does not automatically configure servers to use the certificates,\nthat is up to you.</p>\n<p>To find out where the CA root is located you can run the command;</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">mkcert --CAROOT</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<blockquote>\n<p>Warning: the rootCA-key.pem file that is automatically generated gives complete power to intercept\nsecure requests from your machine. Do not share it.</p>\n</blockquote>\n<p>It is also important to know that Node.js comes as mentioned earlier bundled with common used CA root\ncertificates and thus does not use the system root store, so it won't accept mkcert certificates\nautomatically. Instead, you will have to set the NODE<em>EXTRA</em>CA_CERTS environment variable.</p>\n<p>With all this in mind, when you want to set up your local development computer to use *.example.com domain\nnames and run your Node.js with HTTP/SSL, you can do this after installation of mkcert.</p>\n<p>Edit your host file located in \\Windows\\System32\\drivers\\hosts, you need to map the ip address 127.0.0.1\nto example.com domain name.</p>\n<p>Run mkcert to create a certificate and a key for example.com.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">mkcert example.com</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Now you will have a certificate, and a key file generated to be used in your Node.js server listening on\nthe example.com domain. The certificate is at \"./example.com.pem\" and, the key at \"./example.com-key.pem\"</p>\n<p>Just a short snippet on the app code using express.js.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> strict <span class=\"token keyword\">as</span> assert <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'assert'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> https <span class=\"token keyword\">from</span> <span class=\"token string\">'https'</span>\n<span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span>\n<span class=\"token keyword\">import</span> bodyParser <span class=\"token keyword\">from</span> <span class=\"token string\">'body-parser'</span>\n<span class=\"token keyword\">import</span> morgan <span class=\"token keyword\">from</span> <span class=\"token string\">'morgan'</span>\n<span class=\"token keyword\">import</span> cors <span class=\"token keyword\">from</span> <span class=\"token string\">'cors'</span>\n<span class=\"token keyword\">import</span> helmet <span class=\"token keyword\">from</span> <span class=\"token string\">'helmet'</span>\n<span class=\"token keyword\">import</span> compression <span class=\"token keyword\">from</span> <span class=\"token string\">'compression'</span>\n\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SERVER_KEY_FILE</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'process.env.SERVER_KEY_FILE missing'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SERVER_CERT_FILE</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'process.env.SERVER_CERT_FILE missing'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SERVER_KEY_FILE</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cert <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SERVER_CERT_FILE</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> port<span class=\"token punctuation\">,</span> appName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> appConfig\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HOST</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>appName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">compression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">helmet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">morgan</span><span class=\"token punctuation\">(</span><span class=\"token string\">'combined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Routes etc</span>\n\nhttps<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> cert <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>appConfig<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Listening on: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">HOST</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Test the certificate by using Chrome and access the server. if everything has gone well, you access it\nvia HTTPS/SSL and, the connection is secure.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://github.com/FiloSottile/mkcert\">mkcert</a></li>\n<li><a href=\"https://nodejs.org/api/cli.html#cli_node_extra_ca_certs_file\">Node.js</a></li>\n</ul>"}},"pageContext":{"slug":"/articles/node-local-development-ssl/"}},"staticQueryHashes":["4011214723"]}