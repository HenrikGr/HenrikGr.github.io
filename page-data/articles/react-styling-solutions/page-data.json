{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/react-styling-solutions/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Styling your React app","subtitle":"Article about styling solutions for your React app","date":"2019-11-20","publishedBy":"Henrik Grönvall"},"excerpt":"In this article series, I will highlight and explain common different styling solutions for you React based front \nend application. The first part will cover…","timeToRead":6,"html":"<p>In this article series, I will highlight and explain common different styling solutions for you React based front\nend application. The first part will cover inline styles, CSS and pre-processors and CSS Modules. The second part will\ncover CSS-in-JS and the last part will cover existing popular component libraries.</p>\n<h1>Introduction</h1>\n<p>When deciding on a styling solution for your React application there are a lot of parameters to consider, we might feel\ninsecure about other peoples work, will the solution match your requirements, will it reach the quality goals you have,\ndo you want to build your own component library with the extra time it will take or using existing one to save time, etc...</p>\n<p>The fastest and maybe the easiest way is to chose one existing component library and there are a lot of them, however,\nthis is a topic for another article.</p>\n<h1>How to style components?</h1>\n<p>When building with React, I personally started with inline styling, went further with CSS Modules and learned Sass and\nthen I ended up using CSS-in-JS bases solutions. </p>\n<h1>Inline styles</h1>\n<p>React lets you add CSS inline, written as attributes and passed to elements. In React, inline styles are not specified\nas a string. Instead they are specified with an object whose key is the camelCased version of the style name, and whose\nvalue is the style’s value, usually a string. The style attribute accepts a JavaScript object with camelCased properties\nrather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS\nsecurity holes. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* components/header.js */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Style is specified as an object to the style attribute</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>h1 className<span class=\"token operator\">=</span><span class=\"token string\">'heading'</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Heading<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// We can also define the style in a JavaScript </span>\n<span class=\"token comment\">// object outside the component</span>\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>h1 className<span class=\"token operator\">=</span><span class=\"token string\">\"heading\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hello World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>But, lets say that we are using the Header component in a lot of places, the rendered HTML can end up like this;</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Heading<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Heading<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Heading<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Heading<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Notice how the style attribute is repeated over and over and what happens if someone wants this color red changed the\ndeveloper in that spot would think CSS first, not in the code.</p>\n<p>Inline styles are usually considered bad practice to write in HTML, since it increases the size of the file and makes\nit harder to maintain, etc.</p>\n<h1>CSS or pre-processors such as Sass</h1>\n<p>We can of course use CSS files as we always have and then use the className on our elements to attach our styles.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token comment\">/* components/header.css */</span>\n<span class=\"token selector\">.heading</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* components/header.js */</span>\n<span class=\"token comment\">// We are importing our stylesheet</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./styles.css'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The heading css class is attach to the component</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>h1 className<span class=\"token operator\">=</span><span class=\"token string\">'heading'</span><span class=\"token operator\">></span>Heading<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Renders this</span>\n<span class=\"token comment\">// &lt;h1 class=\"heading\">Heading&lt;/h1></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Note that your styles will not be localized to your component, it will be attached to your DOM elements which\nmeans globals problem.</p>\n<p>If you want to use CSS I recommend that you are using Sass to create you CSS file(s)</p>\n<h2>Why should you use Sass over plain CSS?</h2>\n<p>One of the great benefits of using a CSS pre-processor like Sass is the ability to use variables. A variable allows you\nto store a value or a set of values, and to reuse these variables throughout your Sass files as many times you want and\nwherever you want. </p>\n<p>Another fantastic benefit of CSS pre-processors is their improved syntax. Sass allows you to use a nested syntax, which\nis code contained within another piece of code that performs a wider function.</p>\n<p>Using variables is great but what if you have blocks of code repeating in your style sheet more than once? That is when\nmixins come into play. Mixins are like functions in other programming languages. They return a value or set of values\nand can take parameters including default values. Note that Sass also has functions, so do not confuse a mixin\nwith a function.</p>\n<p>Another advantage of using SASS is the huge amount of documentation available online. From tutorials to books, SASS has\nall you need to become an expert. The fact is, Sass is all around. Along with Less, one of the other solid alternatives,\nSass has become the most used CSS pre-processor in the front-end universe. Some of the best front-end frameworks like\nBootstrap and Foundation have been developed with SASS which means you can easily extends them.</p>\n<h1>CSS Module</h1>\n<p>A CSS Module is a CSS file in which all class names and animation names are scoped locally by default. With CSS Modules,\nyour CSS class names become similar to local variables in JavaScript.</p>\n<p>In CSS Modules, each file is compiled separately so you can use simple class selectors with generic names — you don’t\nneed to worry about polluting the global scope. </p>\n<p><strong>Before CSS Modules</strong>\nWe might code this up using Suit/BEM-style classnames &#x26; plain old CSS &#x26; HTML like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token comment\">/* components/submit-button.css */</span>\n<span class=\"token selector\">.Button</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* all styles for Normal */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.Button--disabled</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* overrides for Disabled */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.Button--error</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* overrides for Error */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.Button--in-progress</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* overrides for In Progress */</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Button Button--in-progress<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Processing...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>It’s quite good. We have these four variants but BEM-style naming means we don’t have nested selectors. We’re starting\nButton with a capital letter so as to (hopefully) avoid clashes with any of our previous styles or any dependencies we’re\npulling in. And we’re adopting the --modifier syntax to be clear that the variants require the base class to be applied.</p>\n<p><strong>With CSS Modules</strong>\nCSS Modules means you never need to worry about your names being too generic, just use whatever makes the most sense:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token comment\">/* components/submit-button.css */</span>\n<span class=\"token selector\">.normal</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* all styles for Normal */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.disabled</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* all styles for Disabled */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.error</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* all styles for Error */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.inProgress</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* all styles for In Progress */</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Notice that we don’t use the word “button” anywhere. Why would we? The file is already called “submit-button.css”.\nIn any other language, you don’t have to prefix all your local variables with the name of the file you’re working on —\nCSS should be no different.</p>\n<p>That’s made possible by the way CSS Modules is compiled — by using require or import to load the file from JavaScript:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* components/submit-button.js */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token comment\">// Load the css file</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./submit-button.css'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SubmitButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> className<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Submit\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>submissionInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      className <span class=\"token operator\">=</span> styles<span class=\"token punctuation\">.</span>inProgress\n      text <span class=\"token operator\">=</span> <span class=\"token string\">\"Processing...\"</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>errorOccurred<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      className <span class=\"token operator\">=</span> styles<span class=\"token punctuation\">.</span>error\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      className <span class=\"token operator\">=</span> styles<span class=\"token punctuation\">.</span>disabled\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      className <span class=\"token operator\">=</span> styles<span class=\"token punctuation\">.</span>normal\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Renders something like this</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// &lt;button class=\"components_submit_button__normal__abc5436\"></span></span><span class=\"token comment\">//    Processing...</span>\n<span class=\"token comment\">// &lt;/button></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The actual class names are automatically generated and guaranteed to be unique, see line 23. </p>\n<p>CSS Modules are one of the most popular ways for styling React components. Whether you are using only CSS or a more\nadvanced pre-processor like SASS, it doesn't matter for CSS Modules: You can write all these styles in your style sheet\nfiles next to your React components.</p>\n<blockquote>\n<p>Note: If you are using <strong>create-react-app</strong>, it comes with CSS Modules out of the box. </p>\n</blockquote>\n<p>If you are not using <strong>create-react-app</strong> and instead using you own React + Webpack application, you need some set up\nbefore you can start using CSS Modules in React.</p>\n<p><strong>First</strong>, we need some more loaders for Webpack. These loaders enable Webpack to bundle CSS files:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> css-loader style-loader --save-dev</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Then</strong> you need to configure Webpack and in your webpack.config.js file, add the new loaders for interpreting CSS files:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/* webpack.config.js */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.css$/i</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              modules<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The next article in this series will cover CSS-in-JS and hopefully shed some light over how it allows us to use\nJavaScript to describe styles in a declarative, conflict-free and reusable way.</p>"}},"pageContext":{"slug":"/articles/react-styling-solutions/"}}}