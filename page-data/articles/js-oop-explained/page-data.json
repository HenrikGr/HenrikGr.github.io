{"componentChunkName":"component---src-templates-article-page-template-js","path":"/articles/js-oop-explained/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"JavaScript OOP","subtitle":"Encapsulation and inheritance in JavaScript","date":"2019-11-29","publishedBy":"Henrik Grönvall"},"excerpt":"Object-Oriented Programming, OOP, refers to using self-contained pieces of code to develop applications. We call these\r\nself-contained pieces of code objects…","timeToRead":13,"html":"<p>Object-Oriented Programming, OOP, refers to using self-contained pieces of code to develop applications. We call these\r\nself-contained pieces of code objects. We use objects as building blocks for our applications. Building applications\r\nwith objects allows us to adopt some valuable techniques such as;</p>\n<ul>\n<li>Inheritance, objects can inherit features from other objects,</li>\n<li>Polymorphism, objects can share the same interface—how they are accessed and used—while their underlying implementation\r\nof the interface may differ, and</li>\n<li>Encapsulation, each object is responsible for specific tasks.</li>\n</ul>\n<p>In this article, we are concerned with only <strong>Inheritance</strong> and <strong>Encapsulation</strong> since only these two concepts apply to\r\nOOP in JavaScript, particularly because in JavaScript, objects can encapsulate functionality and inherit methods and\r\nproperties from other objects.</p>\n<blockquote>\n<p>This article does not cover ES6 new class keyword for OOP in JavaScript, that is another article coming soon.</p>\n</blockquote>\n<h1>Encapsulation and Inheritance in JavaScript</h1>\n<p>Objects can be thought of as the main actors in an application, or simply the main “things” or building blocks that do\r\nall the work. As you know by now, objects are everywhere in JavaScript since every component in JavaScript is an Object,\r\nincluding Functions, Strings, and Numbers. We normally use object literals, or the constructor functions to create objects.</p>\n<p><strong>Encapsulation</strong> refers to enclosing all the functionality of an object within that object so that the object’s internal\r\nworkings, its methods and properties, are hidden from the rest of the application. This allows us to abstract or\r\nlocalize specific set of functionality on objects.</p>\n<p><strong>Inheritance</strong> refers to an object being able to inherit methods and properties from a parent object, a Class in other OOP\r\nlanguages, or a Function in JavaScript.</p>\n<p>Both of these concepts, encapsulation and inheritance, are important because they allow us to build applications with\r\nreusable code, scalable architecture, and abstracted functionality. Maintainable, scalable, efficient.</p>\n<p>An instance is an implementation of a Function. In simple terms, it is a copy, or “child” of a Function or object.\r\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Tree is a constructor function because </span>\r\n<span class=\"token comment\">// we will use new keyword to invoke it.</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">typeOfTree</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \r\n\r\n<span class=\"token comment\">// appleTree is an instance of Tree.</span>\r\n<span class=\"token keyword\">const</span> appleTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In the preceding example, appleTree is an object that was created from the Tree constructor function. We say\r\nthat the appleTree object is an instance of the Tree object. Tree is both an object and a function, because functions are\r\nobjects in JavaScript. appleTree can have its own methods and properties and inherit methods and properties from the\r\nTree object, as we will discuss in detail when we study inheritance below.</p>\n<h2>OOP in JavaScript</h2>\n<p>The two important principles with OOP in JavaScript are <strong>Object Creation patterns</strong> (Encapsulation), and <strong>Code Reuse\r\npatterns</strong> (Inheritance). When building applications, you create many objects, and there exist many ways for creating\r\nthese objects: you can use the ubiquitous <strong>object literal pattern</strong>, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">,</span> profession<span class=\"token operator\">:</span> <span class=\"token string\">\"Software Developer\"</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>You can use the <strong>prototype pattern</strong>, adding each method and property directly on the object’s prototype. For example: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Consultant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">Consultant</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Henrik\"</span>\r\n<span class=\"token class-name\">Consultant</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Grönvall\"</span>\r\n<span class=\"token class-name\">Consultant</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>startDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token function\">Today</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token class-name\">Consultant</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">let</span> henrikGr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consultant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>henrikGr<span class=\"token punctuation\">.</span><span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Henrik Grönvall</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You can also use the <strong>constructor pattern</strong>, a constructor function, Classes in other languages, but Functions in JavaScript.\r\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Consultant() is the constructor function because </span>\r\n<span class=\"token comment\">// we use the new keyword below to invoke it.</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Consultant</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> profession</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>profession <span class=\"token operator\">=</span> profession\r\n<span class=\"token punctuation\">}</span> \r\n\r\n<span class=\"token comment\">// henrikGr is a new object we create from </span>\r\n<span class=\"token comment\">// the Consultant() constructor function.</span>\r\n<span class=\"token keyword\">let</span> henrikGr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consultant</span><span class=\"token punctuation\">(</span>“Henrik”<span class=\"token punctuation\">,</span> “Software Developer”<span class=\"token punctuation\">)</span> \r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>henrikGr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//Henrik</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>henrikGr<span class=\"token punctuation\">.</span>profession<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Software Developer</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In the latter example, we use a custom constructor function to create an object. This is how we create objects when we\r\nwant to add methods and properties on our objects, and when we want to encapsulate functionality on our objects.\r\nJavaScript developer have invented many patterns for creating objects with constructor functions. And when we\r\nsay <strong>Object Creation Patterns</strong>, we are concerned principally with the many ways of creating objects from constructor\r\nfunctions, as in the preceding example.</p>\n<p>In addition to the patterns for creating objects, you want to reuse code efficiently. When you create your objects, you\r\nwill likely want some of them to inherit (have similar functionality) methods and properties from a parent object, yet\r\nthey should also have their own methods and properties. <strong>Code reuse patterns</strong> facilitate ways in which we can implement\r\ninheritance.</p>\n<p>These two universal principles — creating objects (especially from constructor Functions) and allowing objects to inherit\r\nproperties and methods — are the main focus of this article and, indeed, the main concepts with OOP in JavaScript.</p>\n<h2>Encapsulation in JavaScript</h2>\n<p>To implement encapsulation in JavaScript, we have to define the core methods and properties on that object.\r\nBefore we implement it, let’s quickly learn a bit more about the practicality of encapsulation.</p>\n<h3>Why Encapsulation?</h3>\n<p>When you simply want to create an object just to store some data, and it is the only object of its kind, you can use an\r\nobject literal and create your object. This is quite common and, you will use this simple pattern often.</p>\n<p>However, whenever you want to create objects with similar functionality, to use the same methods and properties, you\r\nencapsulate the main functionality in a Function and, you use that Function’s constructor to create the objects. This is\r\nthe essence of encapsulation, and it is this need for encapsulation that we are concerned with.</p>\n<p>To make practical use of OOP in JavaScript, we will build an object-oriented quiz application that uses all the\r\nprinciples and techniques we learn in this article. First up, our quiz application will have users (a Users Function)\r\nwho take the quiz. There will be some common properties for every user who takes the quiz: each user will have a name,\r\na score, an email, and the quiz scores (all the scores). These are the properties of the User object. In addition, each\r\nUser object should be able to show the name and score, save scores, and change the email. These are the methods of\r\nthe object.</p>\n<p>Because we want ALL the user objects to have these same properties and methods, we cannot use the object literal way of\r\ncreating objects. We have to use a constructor Function to encapsulate these properties and methods.</p>\n<p>Since we know all users will have the same set of properties, it makes sense to create a Function, Class in OOP\r\nlanguages, that encapsulates these properties and methods.</p>\n<h3>Implementation example</h3>\n<p>A User Function example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> email</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentScore <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  constructor<span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">saveScore</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">score</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">showNameAndScores</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"No Scores Yet\"</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" Scores: \"</span> <span class=\"token operator\">+</span> scores\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">changeEmail</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email\r\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"New Email Saved: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then we can create an instance of the User object:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// A User </span>\r\nfirstUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"henrik@examnple.com\"</span><span class=\"token punctuation\">)</span> \r\nfirstUser<span class=\"token punctuation\">.</span><span class=\"token function\">changeEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"henrik.gronvall@examnple.com\"</span><span class=\"token punctuation\">)</span>\r\nfirstUser<span class=\"token punctuation\">.</span><span class=\"token function\">saveScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\r\nfirstUser<span class=\"token punctuation\">.</span><span class=\"token function\">saveScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\r\n\r\nfirstUser<span class=\"token punctuation\">.</span><span class=\"token function\">showNameAndScores</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Henrik Scores: 15,10</span>\r\n\r\n<span class=\"token comment\">// Another User</span>\r\nsecondUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lars\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lars@examnple.com\"</span><span class=\"token punctuation\">)</span>\r\nsecondUser<span class=\"token punctuation\">.</span><span class=\"token function\">saveScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\r\nsecondUser<span class=\"token punctuation\">.</span><span class=\"token function\">showNameAndScores</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//Lars Scores: 18</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Let’s expound on each line of the code in the User function, so we have a thorough understanding of this pattern.</p>\n<p>The lines 2-5 initialize the instance properties. These properties will be defined on each User instance that is\r\ncreated. So the values will be different for each user. The use of this keyword inside the function specifies that\r\nthese properties will be unique to every instance of the User object:</p>\n<p>In the lines 9-20, we are overwriting the prototype property with an object literal, and we define all of our methods,\r\nthat will be inherited by all the User instances, in this object.</p>\n<p>This way of overwriting the constructor is simply for convenience, so we don’t have to write User.prototype each time,\r\nlike this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> User\r\n<span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">saveScore</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">score</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">showNameAndScores</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"No Scores Yet\"</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" Scores: \"</span> <span class=\"token operator\">+</span> scores\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">changeEmail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email\r\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"New Email Saved: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>By overwriting the prototype with a new object literal we have all the methods organized in one place, and you can\r\nbetter see the encapsulation that we are after and, of course it is less code you have to type.</p>\n<p><strong>JavaScript Prototype</strong>\r\nIn JavaScript, you add methods and properties on the prototype property when you want instances of an object to inherit\r\nthose methods and properties. This is the reason we add the methods on the User.prototype property, so that they can be\r\nused by all instances of the User object. <a href=\"../js-prototype-explained/\">You can read more in my previous article about prototype</a></p>\n<p><strong>Constructor Property</strong>\r\nEvery function has a constructor property, and this property points to the constructor of the function. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">const</span> newFruit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newFruit<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fruit ()</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>The one disadvantage of overwriting the prototype is that the constructor property no longer points to the prototype,\r\nso we have to set it manually:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">constructor<span class=\"token operator\">:</span> User</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Prototype Methods</strong>\r\nIn the following lines, we create methods on the prototype so that all instances of Users can have access to these methods.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token function-variable function\">saveScore</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">score</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token function-variable function\">showNameAndScores</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">var</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quizScores<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"No Scores Yet\"</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" Scores: \"</span> <span class=\"token operator\">+</span> scores\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token function-variable function\">changeEmail</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"New Email Saved: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then we created instances of the User object:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// A User </span>\r\nfirstUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Henrik\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"henrik@examnple.com\"</span><span class=\"token punctuation\">)</span> \r\nfirstUser<span class=\"token punctuation\">.</span><span class=\"token function\">changeEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"henrik.gronvall@examnple.com\"</span><span class=\"token punctuation\">)</span>\r\nfirstUser<span class=\"token punctuation\">.</span><span class=\"token function\">saveScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\r\nfirstUser<span class=\"token punctuation\">.</span><span class=\"token function\">saveScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \r\n\r\nfirstUser<span class=\"token punctuation\">.</span><span class=\"token function\">showNameAndScores</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Henrik Scores: 15,10</span>\r\n\r\n<span class=\"token comment\">// Another User</span>\r\nsecondUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lars\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lars@examnple.com\"</span><span class=\"token punctuation\">)</span>\r\nsecondUser<span class=\"token punctuation\">.</span><span class=\"token function\">saveScore</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\r\nsecondUser<span class=\"token punctuation\">.</span><span class=\"token function\">showNameAndScores</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//Lars Scores: 18</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you see, we have encapsulated all the functionality for a User inside the User Function, so that each instance of\r\nUser can make use of the prototype methods (like changeEmail) and define their own instance properties, like name and\r\nemail.</p>\n<p>With this pattern, you can use the standard operators and methods on the instances, including the instanceOf operator,\r\nthe for-in loop, even hasOwnProperty, and the constructor property.</p>\n<h2>Inheritance in JavaScript</h2>\n<p>Implementing inheritance in our quiz application will permit us to inherit functionality from parent Functions to reuse\r\ncode in our application and extend the functionality of objects. Objects can make use of their inherited functionality\r\nand still have their own specialized functionality.</p>\n<p>Let’s see why its practical to use inheritance in our example application.</p>\n<p>We have successfully implemented encapsulation by enclosing all the functionality for users of our quiz application by\r\nadding all the methods and properties that each user will need on the User function, and all instances of User will\r\nhave those properties and methods.</p>\n<h3>Why Inheritance?</h3>\n<p>Next, we want to encapsulate all the functionality for every Question. The Question function, Class in OOP languages,\r\nwill have all the generic properties and methods that every kind of question will need to have. For example, every\r\nquestion will have the question, the choices, and the correct answer. These will be the properties. In addition, each\r\nquestion will have some methods: getCorrectAnswer and getUserAnswer, and displayQuestion.</p>\n<p>We want our quiz application to make different types of Questions. We will implement a MultipleChoiceQuestion function\r\nand, a DragDropQuestion function. To implement these, it would not make sense to put the properties and methods outlined\r\nabove - that all questions will use - inside the MultipleChoiceQuestion and DragDropQuestion functions separately,\r\nrepeating the same code. This would be redundant.</p>\n<p>Instead, we will leave those properties and methods - that all questions will use - inside the Question object and make\r\nthe MultipleChoiceQuestion and DragDropQuestion functions inherit those methods and properties. This is where\r\ninheritance is important: we can reuse code throughout our application effectively and better maintain our code.</p>\n<p>Since the MultipleChoiceQuestion HTML layout will be different from the DragDropQuestion HTML layout, the\r\ndisplayQuestion method will be implemented differently in each. So we will <strong>override</strong> the displayQuestion method on the\r\nDragDropQuestion. Overriding functions is another principle of OOP.</p>\n<h3>Implementing Inheritance</h3>\n<p>To implement inheritance we have to use two techniques specifically for inheritance in JavaScript.</p>\n<ul>\n<li>creating children objects that inherits from a parent</li>\n<li>overriding methods</li>\n</ul>\n<h3>Creating children</h3>\n<p>Creating our quiz OOP style, lets go ahead and implement our Question constructor first. This can be thought of as a\r\nsuper class for Questions.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/**\r\n * Question constructor\r\n * All question objects will inherit from this\r\n * @param theQuestion\r\n * @param theChoices\r\n * @param theCorrectAnswer\r\n * @constructor\r\n */</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Question</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theQuestion<span class=\"token punctuation\">,</span> theChoices<span class=\"token punctuation\">,</span> theCorrectAnswer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Initialize the instance properties</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>question <span class=\"token operator\">=</span> theQuestion<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>choices <span class=\"token operator\">=</span> theChoices<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>correctAnswer <span class=\"token operator\">=</span> theCorrectAnswer<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userAnswer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token comment\">// private properties: these cannot be changed by instances</span>\r\n  <span class=\"token keyword\">const</span> newDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token comment\">// Constant variable: available to all instances through the </span>\r\n  <span class=\"token comment\">// instance method below. This is also a private property.</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">QUIZ_CREATED_DATE</span> <span class=\"token operator\">=</span> newDate<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token comment\">// This is the only way to access the private QUIZ_CREATED_DATE </span>\r\n  <span class=\"token comment\">// variable </span>\r\n  <span class=\"token comment\">// This is an example of a privilege method: it can access </span>\r\n  <span class=\"token comment\">// private properties and it can be called publicly</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getQuizDate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">QUIZ_CREATED_DATE</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token comment\">// A confirmation message that the question was created</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Quiz Created On: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQuizDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Next, we are adding prototype methods to the Question objects, all instances of the Question object will inherit these\r\nmethods, because we are adding the methods on the Question prototype.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Define the prototype methods that will be inherited</span>\r\n<span class=\"token class-name\">Question</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getCorrectAnswer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>correctAnswer\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">Question</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getUserAnswer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userAnswer\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">Question</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">displayQuestion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> questionToDisplay <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>question\r\n    <span class=\"token keyword\">let</span> choiceCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eachChoice</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n        questionToDisplay <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;span>'</span> <span class=\"token operator\">+</span> eachChoice <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/span>'</span>\r\n        choiceCounter<span class=\"token operator\">++</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>questionToDisplay<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now that we have the Question constructor object setup, we can inherit from it and create sub classes (children objects).\r\nThe power of inheritance is that we can create all sorts of questions now, and each can be quite versatile.</p>\n<p>Now we are creating the Multiple Choice Question:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/**\r\n * MultipleChoiceQuestion constructor\r\n * For MultipleChoiceQuestion to properly inherit from Question,\r\n * here inside the MultipleChoiceQuestion constructor, we have to\r\n * explicitly call the Question constructor\r\n * passing MultipleChoiceQuestion as the this object, and the parameters\r\n * we want to use in the Question constructor:\r\n * @param theQuestion\r\n * @param theChoices\r\n * @param theCorrectAnswer\r\n * @constructor\r\n */</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">MultipleChoiceQuestion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theQuestion<span class=\"token punctuation\">,</span> theChoices<span class=\"token punctuation\">,</span> theCorrectAnswer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Call the Question constructor</span>\r\n  <span class=\"token function\">Question</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> theQuestion<span class=\"token punctuation\">,</span> theChoices<span class=\"token punctuation\">,</span> theCorrectAnswer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then we have to inherit the prototype object from Question:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// inherit the methods and properties from Question</span>\r\n<span class=\"token class-name\">MultipleChoiceQuestion</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Question</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Now, we have ensured that the child, MultipleChoiceQuestion inherits methods from the Question object and when creating\r\na new MultipleQuestion object it will also call the parent constructor first.</p>\n<p>We have one thing left to do before everything is ok, we need to reassign the MultipleChoiceQuestion constructor because\r\nwhen we inherited the parent's prototype, we lost the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token class-name\">MultipleChoiceQuestion</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> MultipleChoiceQuestion<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Now we can make yet another type of question, the drag and drop question:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/**\r\n * DragDropQuestion constructor\r\n * For DragDropQuestion to properly inherit from Question,\r\n * here inside the DragDropQuestion constructor, we have to\r\n * explicitly call the Question constructor\r\n * passing DragDropQuestion as the this object, and the parameters\r\n * we want to use in the Question constructor:\r\n * @param theQuestion\r\n * @param theChoices\r\n * @param theCorrectAnswer\r\n * @constructor\r\n */</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">DragDropQuestion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theQuestion<span class=\"token punctuation\">,</span> theChoices<span class=\"token punctuation\">,</span> theCorrectAnswer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// Call the Question constructor</span>\r\n  <span class=\"token function\">Question</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> theQuestion<span class=\"token punctuation\">,</span> theChoices<span class=\"token punctuation\">,</span> theCorrectAnswer<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// inherit the methods and properties from Question</span>\r\n<span class=\"token class-name\">DragDropQuestion</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Question</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// Re-assign the constructor</span>\r\n<span class=\"token class-name\">DragDropQuestion</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> DragDropQuestion</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Overriding Methods</h3>\n<p>Overriding methods is another principle of OOP, and we can do it easily with this pattern. Since the Drag and\r\nDrop questions will have a different HTML layout from the Multiple Choice questions (no radio buttons, for example),\r\nwe can override the displayQuestion method, so it operates specifically to the Drag and Drop question needs:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Override the displayQuestion method it inherited</span>\r\n<span class=\"token class-name\">DragDropQuestion</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">displayQuestion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> questionToDisplay <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>question\r\n  <span class=\"token keyword\">let</span> choiceCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eachChoice</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n    questionToDisplay <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;div>'</span> <span class=\"token operator\">+</span> eachChoice <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/div>'</span>\r\n    choiceCounter<span class=\"token operator\">++</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html: '</span><span class=\"token punctuation\">,</span> questionToDisplay<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In our real Quiz application, we would create a Quiz constructor that is the main application that launches the quiz,\r\nbut in this article, we can test our inheritance code by simply doing this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Initialize some questions and add them to an array</span>\r\n<span class=\"token keyword\">const</span> allQuestions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\r\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">MultipleChoiceQuestion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Who is Prime Minister of England?\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Trump\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"May\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Löfven\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Macron\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n   \r\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">MultipleChoiceQuestion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What is the Capital of Brazil?\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"São Paulo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rio de Janeiro\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Brasília\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n   \r\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">DragDropQuestion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Drag the correct City to the world map.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Washington, DC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rio de Janeiro\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stockholm\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\">// Display all the questions</span>\r\nallQuestions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eachQuestion</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\r\n    eachQuestion<span class=\"token punctuation\">.</span><span class=\"token function\">displayQuestion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This way we could now override the displayQuestion methods and implement specialized version for the MultipleChoice and\r\nDragDrop questions.</p>\n<p>You can grab the code <a href=\"https://github.com/HenrikGr/playground/tree/master/src/javascript/oop\">here</a></p>"}},"pageContext":{"slug":"/articles/js-oop-explained/"}},"staticQueryHashes":["4011214723"]}