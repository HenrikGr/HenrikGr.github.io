{
    "componentChunkName": "component---src-templates-project-page-template-js",
    "path": "/projects/ci-github-actions/",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"CI/CD with Github Actions","subtitle":"Create custom software development life cycle (SDLC) workflows directly in your GitHub repository","date":"2019-12-15","publishedBy":"Henrik Grönvall"},"excerpt":"Github Actions let us create custom software development life cycle (SDLC) workflows directly in your GitHub repository.\r\nWith GitHub…","timeToRead":3,"html":"<p>Github Actions let us create custom software development life cycle (SDLC) workflows directly in your GitHub repository.\r\nWith GitHub Actions you can build end-to-end continuous integration (CI) and continuous deployment (CD) capabilities\r\ndirectly in your repository.</p>\n<p>#About Github Actions\r\nGitHub Actions help you automate your software development workflows in the same place you store code and collaborate on\r\npull requests and issues. You can write individual tasks, called actions, and combine them to create a custom workflow.\r\nWorkflows are custom automated processes that you can set up in your repository to build, test, package, release, or\r\ndeploy any code project on GitHub.</p>\n<p>Workflows run in Linux, macOS, Windows, and containers on GitHub-hosted servers. You can create workflows using actions\r\ndefined in your repository, open source actions in a public repository on GitHub, or a published Docker container image.</p>\n<p>#Discovering actions in the Github community\r\nGitHub Marketplace is a central location for you to find, share, and use actions built by the GitHub community.</p>\n<p>You can also customize your project with open source actions shared in public repositories on GitHub and use actions\r\nbuilt by GitHub in the actions organization.</p>\n<p>#Use Case\r\nGithub Actions are in my view very flexible and you can design your workflows in many different ways and when testing it\r\nout I decided to test two common use cases:</p>\n<ul>\n<li>Run test when you push code to your Github repo master branch.</li>\n<li>Publish new versions of your package to NPM</li>\n</ul>\n<p>##Run test when pushing code to master branch\r\nThe first test I did was to create an action that should test my code when I push it to the master branch of my Github\r\nrepository. An action must be created in a directory named .github in your own Github repo as an .yml file.</p>\n<p>The action below is named Node CI, it is triggered on the push event on the master branch, it runs one job called build,\r\nthe build job uses a matrix strategy - meaning it will build for different versions of Node.js in this case, the build\r\njob has several steps, check out code, set up a Node.js environment and run npm commands such as ci, install, build and test.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"># Job name is Node CI\r\nname: Node CI\r\n\r\n# This workflow is triggered on pushes to the master repository.\r\non:\r\n  push:\r\n    branches:\r\n      - master  # Push events on master branch\r\n\r\n# We define our jobs\r\njobs:\r\n\r\n  # Build job\r\n  build:\r\n\r\n    # This job runs on Linux\r\n    runs-on: ubuntu-latest\r\n\r\n    # Runs the jobs for Node.js 12.x and 10.x\r\n    strategy:\r\n      matrix:\r\n        node-version: [12.x, 10.x]\r\n\r\n    # Steps for the build job\r\n    steps:\r\n\r\n      # This step check outs code\r\n      - name: Checkout code\r\n        uses: actions/checkout@v1\r\n\r\n      # This step sets up Node.js according to the strategy chosen\r\n      - name: Set up Node.js ${{ matrix.node-version }}\r\n        uses: actions/setup-node@v1\r\n        with:\r\n          node-version: ${{ matrix.node-version }}\r\n\r\n      # This step runs ci, install packages, build app if available and runs test\r\n      - name: Run CI, install, build and test\r\n        run: |\r\n          npm ci\r\n          npm install\r\n          npm run build --if-present\r\n          npm test\r\n        env:\r\n          CI: true\r\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This action works perfectly fine every time I pushes code to my master branch in my remote repo located at Github.</p>\n<p>##Publish releases to NPM\r\nThe second test I did, publish a package to NPM on release, was little trickier since I got some errors indicating access\r\nfailure to NPM. However, the solution was to log in at NPM, create an access token and in my repo, go to settings and\r\nadd the NPM token to the repo as a secret. A repo secret is available in Github Actions via ${{secrets.NPM_TOKEN}}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"># Job name is Publish to NPM\r\nname: Publish to NPM\r\n\r\n# This workflow is triggered on each release event, the types: [published] \r\n# is required here since releases could also be updated or deleted, we only \r\n# want to publish to npm when a new release is created (published).\r\non:\r\n  release:\r\n    types: [published]\r\n\r\n# We define our jobs\r\njobs:\r\n\r\n  # Build job\r\n  build:\r\n\r\n    # This job runs on Linux\r\n    runs-on: ubuntu-latest\r\n\r\n    # Steps for the build job\r\n    steps:\r\n\r\n      # This step check outs code\r\n      - name: Checkout code\r\n        uses: actions/checkout@v1\r\n\r\n      # This step sets up Node.js\r\n      - name: Set up Node.js\r\n        uses: actions/setup-node@v1\r\n        with:\r\n          node-version: 12\r\n          registry-url: https://registry.npmjs.org/\r\n\r\n      # Install \r\n      - run: npm install\r\n\r\n      # Publish to NPM\r\n      - run: npm publish --access public\r\n        env:\r\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>#Summary\r\nI'm surprised how easy it was to use Github Actions and there are also many actions available in the Github Marketplace\r\nyou can use to build your CI/CD solutions. For example, there are templates to integrate with different cloud providers\r\nsuch as AWS, Azure, etc.</p>"}},"pageContext":{"slug":"/projects/ci-github-actions/"}},
    "staticQueryHashes": ["4011214723"]}