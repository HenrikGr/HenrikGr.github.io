{"componentChunkName":"component---src-templates-project-page-template-js","path":"/projects/oauth2-service-overview/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Authorization service","subtitle":"Authorization service with oauth 2","date":"2020-01-11","publishedBy":"Henrik Grönvall"},"excerpt":"In 2006, I started internal projects for my own company and one project was to develop an oauth 2 authorization service\nthat was going to be…","timeToRead":3,"html":"<p>In 2006, I started internal projects for my own company and one project was to develop an oauth 2 authorization service\nthat was going to be deployed in the cloud, run on Node.js and using MongoDb.</p>\n<p>The purpose of the authorization service was to provide me a way to secure a set of RESTful services I had in plan.\nI was thinking of RESTful service for internal applications for time-reporting, invoices, customer care, etc. :-)</p>\n<p>I spent some time searching NPM to see what was already developed because I wanted it to run in Node.js and I found one\npackage, oauth2-server, which is not the most maintained but it helped me understand oauth 2 concept so I\nwent with that.</p>\n<h1>Original project goal</h1>\n<p>The project had some initial goals;</p>\n<ul>\n<li>support oauth 2 standard specifications,</li>\n<li>run on Node.js,</li>\n<li>using MongoDb,</li>\n<li>deployed in the cloud</li>\n</ul>\n<p>It was also obvious that I would need to develop an administration client, a web application, to be able to manage the\ndata stored, such as access tokens, refresh tokens, client, scopes, etc.</p>\n<p>The administration client needed to be; </p>\n<ul>\n<li>designed according to best practice when it comes to RESTful service,</li>\n<li>using CRUD design for data access,</li>\n<li>using JSON Schema for validation,</li>\n<li>using MVC pattern to manage request - response cycles</li>\n</ul>\n<h1>Project outcome</h1>\n<p>The project overall was successful, I learned a lot and today I have much better understanding and have decided to\nre-design the authorization service and the RESTful service used by the administration client.</p>\n<h1>Why re-design?</h1>\n<p>I read up on dependency injection, modular code, clean architecture, SOLID principles, etc. :-)</p>\n<p>Yes, after reading up on this I wanted to test, learn more and I love challenges.</p>\n<p>The authorization service is already done, that was easy since the \"business rules\" for oauth2 was stable and the new\nservice is much better designed, allowing me as a developer to use adapters for the database of choice, it also use\ndependency injection for core services such as logger, crypto, debug, etc. These core services should be NPM packages\nbecause they will be used in the data access repository as well as the (business rules), but I have\nnot had time for that yet. </p>\n<blockquote>\n<p>Every core service such as logger, crypto, etc should have a solid interface to enable me as a developer\nto change the implementation if needed. The business model is rock solid and will not change much.\nThat's clean code.</p>\n</blockquote>\n<p>You can see the code at: <a href=\"https://github.com/HenrikGr/authorization-service\">https://github.com/HenrikGr/authorization-service</a></p>\n<p>The RESTful service for the administration client is an ongoing project right now. The goal of the project is to develop\na data access repository, a data subscription repository to enable live updates. :-)</p>\n<p>Once the repository package is done, I aim to build a controller and service packages to be used by a administration web\napp to maintain the data in the database.</p>\n<p>The final outcome should be;</p>\n<ul>\n<li>core services such as logger, debugger, crypto, etc should be their own NPM packages,</li>\n<li>data access repository supporting CRUD operation and subscription of live data for configured database,</li>\n<li>a service package containing the business rules for the administration client,</li>\n<li>a controller package to connect routing maps and services from the service package.</li>\n</ul>\n<p>This will give me an architecture where it is easy to change databases, web clients, crypto services, logger service, etc\nand use the stable service package containing the business rules. :-)</p>\n<p>After all this is done, the next step will be to develop my customer care app. :-)</p>\n<p>If you want to look at the data access repositories as they are today: <a href=\"https://github.com/HenrikGr/db-repositories\">https://github.com/HenrikGr/db-repositories</a></p>"}},"pageContext":{"slug":"/projects/oauth2-service-overview/"}}}