{"componentChunkName":"component---src-templates-project-page-template-js","path":"/projects/oauth2-service-overview/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Authorization service","subtitle":"Authorization service with OAuth2","date":"2020-01-11","publishedBy":"Henrik Grönvall"},"excerpt":"In 2016, I started internal projects for my own company and one was to develop an OAuth2 authorization service\nto be used and deployd as a…","timeToRead":2,"html":"<p>In 2016, I started internal projects for my own company and one was to develop an OAuth2 authorization service\nto be used and deployd as a cloud service.</p>\n<p>The purpose of the authorization service was to provide me a way to secure a set of RESTful services I also planned\nto develop. I was thinking of RESTful service for internal applications for time-reporting, invoices, customer care, etc.</p>\n<h1>Original project goal</h1>\n<p>The project had some initial goals such as it should be distributed and hosted as a cloud-based service in IBM Cloud,\nnow migrated to Microsoft Azure and;</p>\n<ul>\n<li>runs in Node.js using the Express.js framework,</li>\n<li>fully compatible with RFC 6749 and RFC 6750,</li>\n<li>uses Mongo Atlas as a cloud database service,</li>\n<li>is built on best practice design for RESTful API,</li>\n<li>uses the JSON Schema for validation and sanitation of data models,</li>\n<li>available in repos at Github for evaluation.</li>\n</ul>\n<p>It was also obvious that I would need to develop an administration client, a web application, to be able to manage the\nregistration of client applications, signing up user accounts, managing scopes and normal basic maintenance.</p>\n<p>The goal of the administration client was that it should be distributed and hosted as a cloud-based service in IBM Cloud,\nnow migrated to Microsoft Azure and;</p>\n<ul>\n<li>developed as an SPA - Single Page Application,</li>\n<li>uses React and MaterialUI as the UI framework,</li>\n<li>uses ReactRouter for navigation,</li>\n<li>uses Redux for state management,</li>\n<li>uses axios for XHR and REST API calls,</li>\n<li>uses JSON Scheme for data validation and consistency,</li>\n<li>uses Jest and Enzyme for unit testing,</li>\n<li>available in a repo at Github for evaluation.</li>\n</ul>\n<h1>Project outcome</h1>\n<p>The project overall was successful, I learned a lot and today I have much better understanding after numerous rounds\nof redesign, refactoring etc, and the most difficult part is to stop re-design it when I see new way of solving problems\nthat I want to learn. </p>\n<p>You can see the code and modules for the OAuth2 services at:</p>\n<ul>\n<li><a href=\"https://github.com/HenrikGr/oauth-service\">Authorization service library</a></li>\n<li><a href=\"https://github.com/HenrikGr/oauth-server\">Authorization server for Express.js</a></li>\n</ul>\n<p>The administration client is not finished yet if ever but you can se the code at:</p>\n<ul>\n<li><a href=\"https://github.com/HenrikGr/hgc-admin\">Administration Web application</a></li>\n</ul>"}},"pageContext":{"slug":"/projects/oauth2-service-overview/"}},"staticQueryHashes":["2940938484"]}