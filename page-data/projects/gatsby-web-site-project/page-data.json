{"componentChunkName":"component---src-templates-project-page-template-js","path":"/projects/gatsby-web-site-project/","result":{"data":{"markdownRemark":{"id":"02ac8f4c-cf85-51a7-b2fd-a68fba1ad39f","frontmatter":{"title":"Gatsby static web site project","subtitle":"Project Gatsby powered web site","date":"2019-11-11","publishedBy":"Henrik Grönvall"},"excerpt":"The Gatsby web site project has reached a milestone and is now published at Github Pages. The project is ongoing and more\ncontent as well as…","timeToRead":4,"html":"<p>The Gatsby web site project has reached a milestone and is now published at Github Pages. The project is ongoing and more\ncontent as well as features will be added. </p>\n<h1>Why Gatsby?</h1>\n<p>I have thought about an own site for marketing &#x26; sales, personal branding etc and after I have focused on React based\nSPA clients and Rest API based Node.js at the backend for quite some time I realized that was not the architecture for\nmy needs.</p>\n<p>Gatsby powered blog's seemed popular and after playing with simple solutions I find Gatsby very powerful since it comes\nwith lazy image loading, route prefetch, SEO, service workers, analytics and offline capabilities to name a few features\nthat makes Gatsby easy to use.</p>\n<p>Other pros that makes life as a developer easy using Gatsby are;</p>\n<ul>\n<li>Gatsby is build for React,</li>\n<li>Gatsby built-in router,</li>\n<li>Gatsby plugins and its ecosystem,</li>\n<li>GraphQL in Gatsby,</li>\n<li>etc.</li>\n</ul>\n<h2>Gatsby is built for React</h2>\n<p>I'm an intermediate to advanced JavaScript and React developer and feel comfortable with creating and composing components,\nhandle states and behaviours. I have also used Material-UI as the UI framework for composing components and customize the\nstyling for a long time and find it powerful and easy.</p>\n<blockquote>\n<p>Hint. Do not learn Gatsby before you know and feel comfortable with React because when you wil start learning Gatsby,\nyou will need to learn the plugin system, GraphQL and also some Node.js which can be daunting in the beginning.</p>\n</blockquote>\n<h2>Gatsby built-in router</h2>\n<p>Gatsby ships with a build in Router and you do not need to learn or evaluate which router package you are going to use\nand the built in router has support for SSR and many other feature such as providing state between pages if you want.</p>\n<p>The built in router has two modes to create routes:</p>\n<ol>\n<li>Static Routes: Every component in the src/pages folder becomes automatically a route.</li>\n<li>Dynamic Routes: The createPage API allows you to create dynamic routes.</li>\n</ol>\n<h2>Gatsby plugins and its ecosystem</h2>\n<p>Gatsby Plugins make it possible to introduce pre-defined features on a fine-grained level to your project. As an example,\nI'm using gatsby-plugin-material-ui to add theme support once for all pages as described below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">//gatsby-config.js</span>\n \nmodule<span class=\"token punctuation\">.</span>export <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      resolve<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-plugin-material-ui</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// If you want to use styled components, in conjunction to Material-UI, you should:</span>\n      <span class=\"token comment\">// - Change the injection order</span>\n      <span class=\"token comment\">// - Add the plugin</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// stylesProvider: {</span>\n        <span class=\"token comment\">//   injectFirst: true,</span>\n        <span class=\"token comment\">// },</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   \n    <span class=\"token punctuation\">}</span>  \n  <span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The plugin helps me create and use Material-UI's ThemeProvider and I inject the provider to the wrapRootElement,\nwhich is a special open Gatsby API to add a component that do not re-render on page routing.</p>\n<p>The wrapRootElement API is exported in the gatsby-node.js file and hence picked up by Gatsby during the build process.</p>\n<blockquote>\n<p>Gatsby.js presented itself with a well-structured plugin system and there is a huge ecosystem of Gatsby.js plugins to\nchoose from for your Gatsby.js site. Many of the following benefits (images, markdown, third-party integrations) of\nusing Gatsby.js tie back to its powerful plugin ecosystem.</p>\n</blockquote>\n<h2>GraphQL in Gatsby</h2>\n<p>GraphQL is commonly seen as alternative to REST but it is imperative to remember that REST is mostly used for client-server\ncommunication via HTTP/HTTP(s) when GraphQL is just a query language independently of the communication protocol and\ndata representation. </p>\n<p>GraphQL can be used anywhere where a client requests data and in the case of Gatsby - GraphQL can be seen as the interface\nbetween Gatsby and all its data sources.</p>\n<blockquote>\n<p>GraphQL is another aspect which makes it more complex to learn Gatsby.js as a beginner since it also comes with its own\necosystem, best practices, and libraries. </p>\n</blockquote>\n<h1>Lessons learned</h1>\n<p>There have been a lot of new tech stuffs to get my hands on, markdown for example, I have played with it before\nbut it was long time ago, and my attempts to build a wrapper component for translating the HTML generated by the remark\nplugin into typographic React components was a setback even if I learned a lot.</p>\n<p>GraphQL was something I have never tried before and I'm impressed of the Gatsby architecture and how it uses plugins as\nthe workhorses to build and update schemas to query against when building the static pages.</p>\n<p>React and Material-UI is something I have learned and know a lot about before this project but in the beginning\nof the project I had difficult to stop thinking in SPA architecture terms. It's imperative to understand that the build\nprocess in Gatsby creates static resources after loading in data from the sources.</p>\n<h1>What's next</h1>\n<p>I have more features to add to this project but most of all I will focus on adding content, however functions planned in\nthe future are;</p>\n<ul>\n<li><del>a custom domain in Github Pages, henrikgronvall.com,</del></li>\n<li><del>fix the tre view component on the landing page</del>,</li>\n<li>fix the social component on the landing page,</li>\n<li>support for comments to articles, not sure which system to use though,</li>\n<li>support for mailing list,</li>\n<li>contact form,</li>\n<li>etc.</li>\n</ul>"}},"pageContext":{"slug":"/projects/gatsby-web-site-project/"}}}